{
  "summary": {
    "total": 226,
    "passed": 143,
    "failed": 81,
    "skipped": 5,
    "timestamp": "2025-07-23T12:51:42.990Z"
  },
  "results": [
    {
      "test": {
        "name": "and - true and true",
        "expression": "true and true",
        "input": [],
        "expected": [
          true
        ],
        "tags": [
          "operator",
          "logical",
          "and"
        ]
      },
      "suite": "Logical Operators",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [
          true
        ],
        "time": 0.8741659999999989
      },
      "compilerResult": {
        "success": true,
        "value": [
          true
        ],
        "time": 0.20974999999999966
      }
    },
    {
      "test": {
        "name": "and - true and false",
        "expression": "true and false",
        "input": [],
        "expected": [
          false
        ],
        "tags": [
          "operator",
          "logical",
          "and"
        ]
      },
      "suite": "Logical Operators",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [
          false
        ],
        "time": 0.044375000000002274
      },
      "compilerResult": {
        "success": true,
        "value": [
          false
        ],
        "time": 0.033667000000001224
      }
    },
    {
      "test": {
        "name": "and - false and true",
        "expression": "false and true",
        "input": [],
        "expected": [
          false
        ],
        "tags": [
          "operator",
          "logical",
          "and"
        ]
      },
      "suite": "Logical Operators",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [
          false
        ],
        "time": 0.053000000000000824
      },
      "compilerResult": {
        "success": true,
        "value": [
          false
        ],
        "time": 0.02637499999999804
      }
    },
    {
      "test": {
        "name": "and - false and false",
        "expression": "false and false",
        "input": [],
        "expected": [
          false
        ],
        "tags": [
          "operator",
          "logical",
          "and"
        ]
      },
      "suite": "Logical Operators",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [
          false
        ],
        "time": 0.021792000000001366
      },
      "compilerResult": {
        "success": true,
        "value": [
          false
        ],
        "time": 0.01779200000000003
      }
    },
    {
      "test": {
        "name": "or - true or true",
        "expression": "true or true",
        "input": [],
        "expected": [
          true
        ],
        "tags": [
          "operator",
          "logical",
          "or"
        ]
      },
      "suite": "Logical Operators",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [
          true
        ],
        "time": 0.05795799999999929
      },
      "compilerResult": {
        "success": true,
        "value": [
          true
        ],
        "time": 0.20120899999999864
      }
    },
    {
      "test": {
        "name": "or - true or false",
        "expression": "true or false",
        "input": [],
        "expected": [
          true
        ],
        "tags": [
          "operator",
          "logical",
          "or"
        ]
      },
      "suite": "Logical Operators",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [
          true
        ],
        "time": 0.04279199999999861
      },
      "compilerResult": {
        "success": true,
        "value": [
          true
        ],
        "time": 0.023499999999998522
      }
    },
    {
      "test": {
        "name": "or - false or true",
        "expression": "false or true",
        "input": [],
        "expected": [
          true
        ],
        "tags": [
          "operator",
          "logical",
          "or"
        ]
      },
      "suite": "Logical Operators",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [
          true
        ],
        "time": 0.023500000000002075
      },
      "compilerResult": {
        "success": true,
        "value": [
          true
        ],
        "time": 0.018042000000001224
      }
    },
    {
      "test": {
        "name": "or - false or false",
        "expression": "false or false",
        "input": [],
        "expected": [
          false
        ],
        "tags": [
          "operator",
          "logical",
          "or"
        ]
      },
      "suite": "Logical Operators",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [
          false
        ],
        "time": 0.015708000000000055
      },
      "compilerResult": {
        "success": true,
        "value": [
          false
        ],
        "time": 0.015499999999999403
      }
    },
    {
      "test": {
        "name": "not - true",
        "expression": "not true",
        "input": [],
        "expected": [
          false
        ],
        "tags": [
          "operator",
          "logical",
          "not"
        ]
      },
      "suite": "Logical Operators",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [
          false
        ],
        "time": 0.08779200000000031
      },
      "compilerResult": {
        "success": true,
        "value": [
          false
        ],
        "time": 0.08908299999999869
      }
    },
    {
      "test": {
        "name": "not - false",
        "expression": "not false",
        "input": [],
        "expected": [
          true
        ],
        "tags": [
          "operator",
          "logical",
          "not"
        ]
      },
      "suite": "Logical Operators",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [
          true
        ],
        "time": 0.031708000000001846
      },
      "compilerResult": {
        "success": true,
        "value": [
          true
        ],
        "time": 0.017458000000001306
      }
    },
    {
      "test": {
        "name": "not - empty",
        "expression": "not {}",
        "input": [],
        "expected": [
          true
        ],
        "tags": [
          "operator",
          "logical",
          "not",
          "empty"
        ]
      },
      "suite": "Logical Operators",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [
          true
        ],
        "time": 0.071708000000001
      },
      "compilerResult": {
        "success": true,
        "value": [
          true
        ],
        "time": 0.07458400000000154
      }
    },
    {
      "test": {
        "name": "xor - true xor true",
        "expression": "true xor true",
        "input": [],
        "expected": [
          false
        ],
        "tags": [
          "operator",
          "logical",
          "xor"
        ]
      },
      "suite": "Logical Operators",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [
          false
        ],
        "time": 0.06616700000000009
      },
      "compilerResult": {
        "success": true,
        "value": [
          false
        ],
        "time": 0.053582999999999714
      }
    },
    {
      "test": {
        "name": "xor - true xor false",
        "expression": "true xor false",
        "input": [],
        "expected": [
          true
        ],
        "tags": [
          "operator",
          "logical",
          "xor"
        ]
      },
      "suite": "Logical Operators",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [
          true
        ],
        "time": 0.017790999999999002
      },
      "compilerResult": {
        "success": true,
        "value": [
          true
        ],
        "time": 0.012707999999999942
      }
    },
    {
      "test": {
        "name": "xor - false xor true",
        "expression": "false xor true",
        "input": [],
        "expected": [
          true
        ],
        "tags": [
          "operator",
          "logical",
          "xor"
        ]
      },
      "suite": "Logical Operators",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [
          true
        ],
        "time": 0.01366700000000165
      },
      "compilerResult": {
        "success": true,
        "value": [
          true
        ],
        "time": 0.01404099999999886
      }
    },
    {
      "test": {
        "name": "xor - false xor false",
        "expression": "false xor false",
        "input": [],
        "expected": [
          false
        ],
        "tags": [
          "operator",
          "logical",
          "xor"
        ]
      },
      "suite": "Logical Operators",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [
          false
        ],
        "time": 0.014541000000001247
      },
      "compilerResult": {
        "success": true,
        "value": [
          false
        ],
        "time": 0.011874999999999858
      }
    },
    {
      "test": {
        "name": "implies - true implies true",
        "expression": "true implies true",
        "input": [],
        "expected": [
          true
        ],
        "tags": [
          "operator",
          "logical",
          "implies"
        ]
      },
      "suite": "Logical Operators",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [
          true
        ],
        "time": 0.03466699999999889
      },
      "compilerResult": {
        "success": true,
        "value": [
          true
        ],
        "time": 0.04995800000000017
      }
    },
    {
      "test": {
        "name": "implies - true implies false",
        "expression": "true implies false",
        "input": [],
        "expected": [
          false
        ],
        "tags": [
          "operator",
          "logical",
          "implies"
        ]
      },
      "suite": "Logical Operators",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [
          false
        ],
        "time": 0.016540999999996586
      },
      "compilerResult": {
        "success": true,
        "value": [
          false
        ],
        "time": 0.030750000000001165
      }
    },
    {
      "test": {
        "name": "implies - false implies true",
        "expression": "false implies true",
        "input": [],
        "expected": [
          true
        ],
        "tags": [
          "operator",
          "logical",
          "implies"
        ]
      },
      "suite": "Logical Operators",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [
          true
        ],
        "time": 0.017082999999999515
      },
      "compilerResult": {
        "success": true,
        "value": [
          true
        ],
        "time": 0.015084000000001652
      }
    },
    {
      "test": {
        "name": "implies - false implies false",
        "expression": "false implies false",
        "input": [],
        "expected": [
          true
        ],
        "tags": [
          "operator",
          "logical",
          "implies"
        ]
      },
      "suite": "Logical Operators",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [
          true
        ],
        "time": 0.016625000000001222
      },
      "compilerResult": {
        "success": true,
        "value": [
          true
        ],
        "time": 0.01745899999999878
      }
    },
    {
      "test": {
        "name": "in - string in collection",
        "expression": "'active' in {'active', 'inactive', 'pending'}",
        "input": [],
        "expected": [
          true
        ],
        "tags": [
          "operator",
          "membership",
          "in"
        ]
      },
      "suite": "Membership Operators",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [
          true
        ],
        "time": 0.12670900000000174
      },
      "compilerResult": {
        "success": true,
        "value": [
          true
        ],
        "time": 0.09074999999999989
      }
    },
    {
      "test": {
        "name": "in - number in collection",
        "expression": "1 in {1, 2, 3}",
        "input": [],
        "expected": [
          true
        ],
        "tags": [
          "operator",
          "membership",
          "in"
        ]
      },
      "suite": "Membership Operators",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [
          true
        ],
        "time": 0.07337500000000219
      },
      "compilerResult": {
        "success": true,
        "value": [
          true
        ],
        "time": 0.02750000000000341
      }
    },
    {
      "test": {
        "name": "in - substring",
        "expression": "'a' in 'abc'",
        "input": [],
        "expected": [
          true
        ],
        "tags": [
          "operator",
          "membership",
          "in",
          "string"
        ],
        "skip": {
          "interpreter": false,
          "compiler": false,
          "reason": "String 'in' operator now implemented"
        }
      },
      "suite": "Membership Operators",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [
          false
        ],
        "time": 0.009707999999999828
      },
      "compilerResult": {
        "success": true,
        "value": [
          false
        ],
        "time": 0.020834000000000685
      }
    },
    {
      "test": {
        "name": "in - not found",
        "expression": "4 in {1, 2, 3}",
        "input": [],
        "expected": [
          false
        ],
        "tags": [
          "operator",
          "membership",
          "in"
        ]
      },
      "suite": "Membership Operators",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [
          false
        ],
        "time": 0.08962499999999807
      },
      "compilerResult": {
        "success": true,
        "value": [
          false
        ],
        "time": 0.03262499999999946
      }
    },
    {
      "test": {
        "name": "contains - collection contains item",
        "expression": "{1, 2, 3} contains 1",
        "input": [],
        "expected": [
          true
        ],
        "tags": [
          "operator",
          "membership",
          "contains"
        ]
      },
      "suite": "Membership Operators",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [
          true
        ],
        "time": 0.08354199999999778
      },
      "compilerResult": {
        "success": true,
        "value": [
          true
        ],
        "time": 0.12916600000000145
      }
    },
    {
      "test": {
        "name": "contains - string contains substring",
        "expression": "'abc' contains 'a'",
        "input": [],
        "expected": [
          true
        ],
        "tags": [
          "operator",
          "membership",
          "contains",
          "string"
        ],
        "skip": {
          "interpreter": false,
          "compiler": false,
          "reason": "String 'contains' operator now implemented"
        }
      },
      "suite": "Membership Operators",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [
          false
        ],
        "time": 0.0257920000000027
      },
      "compilerResult": {
        "success": true,
        "value": [
          false
        ],
        "time": 0.01270900000000097
      }
    },
    {
      "test": {
        "name": "contains - not found",
        "expression": "{1, 2, 3} contains 4",
        "input": [],
        "expected": [
          false
        ],
        "tags": [
          "operator",
          "membership",
          "contains"
        ]
      },
      "suite": "Membership Operators",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [
          false
        ],
        "time": 0.06416600000000017
      },
      "compilerResult": {
        "success": true,
        "value": [
          false
        ],
        "time": 0.025583999999998497
      }
    },
    {
      "test": {
        "name": "in - substring not found",
        "expression": "'x' in 'abc'",
        "input": [],
        "expected": [
          false
        ],
        "tags": [
          "operator",
          "membership",
          "in",
          "string"
        ]
      },
      "suite": "Membership Operators",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [
          false
        ],
        "time": 0.012042000000000996
      },
      "compilerResult": {
        "success": true,
        "value": [
          false
        ],
        "time": 0.009707999999999828
      }
    },
    {
      "test": {
        "name": "contains - substring not found",
        "expression": "'abc' contains 'x'",
        "input": [],
        "expected": [
          false
        ],
        "tags": [
          "operator",
          "membership",
          "contains",
          "string"
        ]
      },
      "suite": "Membership Operators",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [
          false
        ],
        "time": 0.007166999999999035
      },
      "compilerResult": {
        "success": true,
        "value": [
          false
        ],
        "time": 0.007709000000001964
      }
    },
    {
      "test": {
        "name": "equality - numbers true",
        "expression": "5 = 5",
        "input": [],
        "expected": [
          true
        ],
        "tags": [
          "operator",
          "comparison",
          "equality"
        ]
      },
      "suite": "Comparison Operators",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [
          true
        ],
        "time": 0.0866669999999985
      },
      "compilerResult": {
        "success": true,
        "value": [
          true
        ],
        "time": 0.05762499999999804
      }
    },
    {
      "test": {
        "name": "equality - numbers false",
        "expression": "1 = 2",
        "input": [],
        "expected": [
          false
        ],
        "tags": [
          "operator",
          "comparison",
          "equality"
        ]
      },
      "suite": "Comparison Operators",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [
          false
        ],
        "time": 0.03862499999999969
      },
      "compilerResult": {
        "success": true,
        "value": [
          false
        ],
        "time": 0.025166999999999717
      }
    },
    {
      "test": {
        "name": "equality - strings",
        "expression": "'hello' = 'hello'",
        "input": [],
        "expected": [
          true
        ],
        "tags": [
          "operator",
          "comparison",
          "equality",
          "string"
        ]
      },
      "suite": "Comparison Operators",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [
          true
        ],
        "time": 0.007166999999999035
      },
      "compilerResult": {
        "success": true,
        "value": [
          true
        ],
        "time": 0.011333999999997957
      }
    },
    {
      "test": {
        "name": "equality - booleans",
        "expression": "true = true",
        "input": [],
        "expected": [
          true
        ],
        "tags": [
          "operator",
          "comparison",
          "equality",
          "boolean"
        ]
      },
      "suite": "Comparison Operators",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [
          true
        ],
        "time": 0.011457999999997526
      },
      "compilerResult": {
        "success": true,
        "value": [
          true
        ],
        "time": 0.009958000000001022
      }
    },
    {
      "test": {
        "name": "inequality - numbers",
        "expression": "5 != 3",
        "input": [],
        "expected": [
          true
        ],
        "tags": [
          "operator",
          "comparison",
          "inequality"
        ]
      },
      "suite": "Comparison Operators",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [
          true
        ],
        "time": 0.05129199999999656
      },
      "compilerResult": {
        "success": true,
        "value": [
          true
        ],
        "time": 0.05566699999999969
      }
    },
    {
      "test": {
        "name": "inequality - strings",
        "expression": "'hello' != 'world'",
        "input": [],
        "expected": [
          true
        ],
        "tags": [
          "operator",
          "comparison",
          "inequality",
          "string"
        ]
      },
      "suite": "Comparison Operators",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [
          true
        ],
        "time": 0.018041000000000196
      },
      "compilerResult": {
        "success": true,
        "value": [
          true
        ],
        "time": 0.009374999999998579
      }
    },
    {
      "test": {
        "name": "less than - numbers",
        "expression": "3 < 5",
        "input": [],
        "expected": [
          true
        ],
        "tags": [
          "operator",
          "comparison",
          "less-than"
        ]
      },
      "suite": "Comparison Operators",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [
          true
        ],
        "time": 0.059457999999999345
      },
      "compilerResult": {
        "success": true,
        "value": [
          true
        ],
        "time": 0.047125000000001194
      }
    },
    {
      "test": {
        "name": "less than - strings",
        "expression": "'a' < 'b'",
        "input": [],
        "expected": [
          true
        ],
        "tags": [
          "operator",
          "comparison",
          "less-than",
          "string"
        ]
      },
      "suite": "Comparison Operators",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [
          true
        ],
        "time": 0.01158399999999915
      },
      "compilerResult": {
        "success": true,
        "value": [
          true
        ],
        "time": 0.016708000000001277
      }
    },
    {
      "test": {
        "name": "greater than - numbers",
        "expression": "5 > 3",
        "input": [],
        "expected": [
          true
        ],
        "tags": [
          "operator",
          "comparison",
          "greater-than"
        ]
      },
      "suite": "Comparison Operators",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [
          true
        ],
        "time": 0.044458999999999804
      },
      "compilerResult": {
        "success": true,
        "value": [
          true
        ],
        "time": 0.048583999999998184
      }
    },
    {
      "test": {
        "name": "greater than - strings",
        "expression": "'b' > 'a'",
        "input": [],
        "expected": [
          true
        ],
        "tags": [
          "operator",
          "comparison",
          "greater-than",
          "string"
        ]
      },
      "suite": "Comparison Operators",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [
          true
        ],
        "time": 0.009082999999996844
      },
      "compilerResult": {
        "success": true,
        "value": [
          true
        ],
        "time": 0.007875000000002075
      }
    },
    {
      "test": {
        "name": "less than or equal",
        "expression": "3 <= 5",
        "input": [],
        "expected": [
          true
        ],
        "tags": [
          "operator",
          "comparison",
          "less-equal"
        ],
        "skip": {
          "interpreter": true,
          "reason": "Not implemented in current interpreter tests"
        }
      },
      "suite": "Comparison Operators",
      "matched": false,
      "compilerResult": {
        "success": true,
        "value": [
          true
        ],
        "time": 0.03900000000000148
      }
    },
    {
      "test": {
        "name": "greater than or equal",
        "expression": "5 >= 3",
        "input": [],
        "expected": [
          true
        ],
        "tags": [
          "operator",
          "comparison",
          "greater-equal"
        ],
        "skip": {
          "interpreter": true,
          "reason": "Not implemented in current interpreter tests"
        }
      },
      "suite": "Comparison Operators",
      "matched": false,
      "compilerResult": {
        "success": true,
        "value": [
          true
        ],
        "time": 0.06987499999999969
      }
    },
    {
      "test": {
        "name": "equality with empty collection returns empty",
        "expression": "5 = {}",
        "input": [],
        "expected": [],
        "tags": [
          "operator",
          "comparison",
          "equality",
          "empty"
        ]
      },
      "suite": "Comparison Operators",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [],
        "time": 0.051082999999998435
      },
      "compilerResult": {
        "success": true,
        "value": [],
        "time": 0.01720900000000114
      }
    },
    {
      "test": {
        "name": "inequality with empty collection returns empty",
        "expression": "{} != {1, 2}",
        "input": [],
        "expected": [],
        "tags": [
          "operator",
          "comparison",
          "inequality",
          "empty"
        ]
      },
      "suite": "Comparison Operators",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [],
        "time": 0.023333000000000936
      },
      "compilerResult": {
        "success": true,
        "value": [],
        "time": 0.01987500000000253
      }
    },
    {
      "test": {
        "name": "collection equality - same order",
        "expression": "{1, 2, 3} = {1, 2, 3}",
        "input": [],
        "expected": [
          true
        ],
        "tags": [
          "operator",
          "comparison",
          "equality",
          "collection"
        ]
      },
      "suite": "Comparison Operators",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [
          true
        ],
        "time": 0.05883299999999991
      },
      "compilerResult": {
        "success": true,
        "value": [
          true
        ],
        "time": 0.027707999999996957
      }
    },
    {
      "test": {
        "name": "collection equality - different order",
        "expression": "{1, 2, 3} = {1, 3, 2}",
        "input": [],
        "expected": [
          false
        ],
        "tags": [
          "operator",
          "comparison",
          "equality",
          "collection"
        ]
      },
      "suite": "Comparison Operators",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [
          false
        ],
        "time": 0.024125000000001506
      },
      "compilerResult": {
        "success": true,
        "value": [
          false
        ],
        "time": 0.028083999999999776
      }
    },
    {
      "test": {
        "name": "collection inequality",
        "expression": "{1, 2} != {1, 2, 3}",
        "input": [],
        "expected": [
          true
        ],
        "tags": [
          "operator",
          "comparison",
          "inequality",
          "collection"
        ]
      },
      "suite": "Comparison Operators",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [
          true
        ],
        "time": 0.046875
      },
      "compilerResult": {
        "success": true,
        "value": [
          true
        ],
        "time": 0.04224999999999923
      }
    },
    {
      "test": {
        "name": "singleton conversion in equality",
        "expression": "name.given = 'John'",
        "input": [
          {
            "name": {
              "given": [
                "John"
              ]
            }
          }
        ],
        "expected": [
          true
        ],
        "tags": [
          "operator",
          "comparison",
          "equality",
          "singleton"
        ]
      },
      "suite": "Comparison Operators",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [
          true
        ],
        "time": 0.12312499999999815
      },
      "compilerResult": {
        "success": true,
        "value": [
          true
        ],
        "time": 0.09937499999999844
      }
    },
    {
      "test": {
        "name": "comparison with empty left operand",
        "expression": "{} = {1, 2}",
        "input": [],
        "expected": [],
        "tags": [
          "operator",
          "comparison",
          "equality",
          "empty"
        ]
      },
      "suite": "Comparison Operators",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [],
        "time": 0.01854200000000006
      },
      "compilerResult": {
        "success": true,
        "value": [],
        "time": 0.01795900000000117
      }
    },
    {
      "test": {
        "name": "string comparison - lexicographic",
        "expression": "'apple' < 'banana'",
        "input": [],
        "expected": [
          true
        ],
        "tags": [
          "operator",
          "comparison",
          "less-than",
          "string"
        ]
      },
      "suite": "Comparison Operators",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [
          true
        ],
        "time": 0.00737500000000324
      },
      "compilerResult": {
        "success": true,
        "value": [
          true
        ],
        "time": 0.014167000000000485
      }
    },
    {
      "test": {
        "name": "and - true and empty",
        "expression": "true and {}",
        "input": [],
        "expected": [],
        "tags": [
          "operator",
          "logical",
          "and",
          "three-valued"
        ]
      },
      "suite": "Three-Valued Logic",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [],
        "time": 0.00975000000000037
      },
      "compilerResult": {
        "success": true,
        "value": [],
        "time": 0.010916999999999177
      }
    },
    {
      "test": {
        "name": "and - false and empty",
        "expression": "false and {}",
        "input": [],
        "expected": [
          false
        ],
        "tags": [
          "operator",
          "logical",
          "and",
          "three-valued"
        ]
      },
      "suite": "Three-Valued Logic",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [
          false
        ],
        "time": 0.06245800000000301
      },
      "compilerResult": {
        "success": true,
        "value": [
          false
        ],
        "time": 0.006792000000000797
      }
    },
    {
      "test": {
        "name": "and - empty and true",
        "expression": "{} and true",
        "input": [],
        "expected": [],
        "tags": [
          "operator",
          "logical",
          "and",
          "three-valued"
        ]
      },
      "suite": "Three-Valued Logic",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [],
        "time": 0.007124999999998494
      },
      "compilerResult": {
        "success": true,
        "value": [],
        "time": 0.014707999999998833
      }
    },
    {
      "test": {
        "name": "and - empty and false",
        "expression": "{} and false",
        "input": [],
        "expected": [
          false
        ],
        "tags": [
          "operator",
          "logical",
          "and",
          "three-valued"
        ]
      },
      "suite": "Three-Valued Logic",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [
          false
        ],
        "time": 0.06416600000000017
      },
      "compilerResult": {
        "success": true,
        "value": [
          false
        ],
        "time": 0.027457999999999316
      }
    },
    {
      "test": {
        "name": "and - empty and empty",
        "expression": "{} and {}",
        "input": [],
        "expected": [],
        "tags": [
          "operator",
          "logical",
          "and",
          "three-valued"
        ]
      },
      "suite": "Three-Valued Logic",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [],
        "time": 0.012167000000001593
      },
      "compilerResult": {
        "success": true,
        "value": [],
        "time": 0.011750000000002814
      }
    },
    {
      "test": {
        "name": "or - true or empty",
        "expression": "true or {}",
        "input": [],
        "expected": [
          true
        ],
        "tags": [
          "operator",
          "logical",
          "or",
          "three-valued"
        ]
      },
      "suite": "Three-Valued Logic",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [
          true
        ],
        "time": 0.045666999999998126
      },
      "compilerResult": {
        "success": true,
        "value": [
          true
        ],
        "time": 0.00862499999999855
      }
    },
    {
      "test": {
        "name": "or - false or empty",
        "expression": "false or {}",
        "input": [],
        "expected": [],
        "tags": [
          "operator",
          "logical",
          "or",
          "three-valued"
        ]
      },
      "suite": "Three-Valued Logic",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [],
        "time": 0.008749999999999147
      },
      "compilerResult": {
        "success": true,
        "value": [],
        "time": 0.009792000000000911
      }
    },
    {
      "test": {
        "name": "or - empty or true",
        "expression": "{} or true",
        "input": [],
        "expected": [
          true
        ],
        "tags": [
          "operator",
          "logical",
          "or",
          "three-valued"
        ]
      },
      "suite": "Three-Valued Logic",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [
          true
        ],
        "time": 0.007332999999999146
      },
      "compilerResult": {
        "success": true,
        "value": [
          true
        ],
        "time": 0.009249999999997982
      }
    },
    {
      "test": {
        "name": "or - empty or false",
        "expression": "{} or false",
        "input": [],
        "expected": [],
        "tags": [
          "operator",
          "logical",
          "or",
          "three-valued"
        ]
      },
      "suite": "Three-Valued Logic",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [],
        "time": 0.0070000000000014495
      },
      "compilerResult": {
        "success": true,
        "value": [],
        "time": 0.007874999999998522
      }
    },
    {
      "test": {
        "name": "or - empty or empty",
        "expression": "{} or {}",
        "input": [],
        "expected": [],
        "tags": [
          "operator",
          "logical",
          "or",
          "three-valued"
        ]
      },
      "suite": "Three-Valued Logic",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [],
        "time": 0.0072499999999990905
      },
      "compilerResult": {
        "success": true,
        "value": [],
        "time": 0.007833999999999008
      }
    },
    {
      "test": {
        "name": "concatenation - simple",
        "expression": "'Hello' & ' ' & 'World'",
        "input": [],
        "expected": [
          "Hello World"
        ],
        "tags": [
          "operator",
          "string",
          "concatenation"
        ]
      },
      "suite": "String Operators",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [
          "Hello World"
        ],
        "time": 0.057332999999999856
      },
      "compilerResult": {
        "success": true,
        "value": [
          "Hello World"
        ],
        "time": 0.059833000000001135
      }
    },
    {
      "test": {
        "name": "concatenation - two strings",
        "expression": "'FHIR' & 'Path'",
        "input": [],
        "expected": [
          "FHIRPath"
        ],
        "tags": [
          "operator",
          "string",
          "concatenation"
        ]
      },
      "suite": "String Operators",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [
          "FHIRPath"
        ],
        "time": 0.012249999999998096
      },
      "compilerResult": {
        "success": true,
        "value": [
          "FHIRPath"
        ],
        "time": 0.006416000000001532
      }
    },
    {
      "test": {
        "name": "concatenation with navigation",
        "expression": "name.given.first() & ' ' & name.family",
        "input": [
          {
            "name": {
              "given": [
                "John"
              ],
              "family": "Doe"
            }
          }
        ],
        "expected": [
          "John Doe"
        ],
        "tags": [
          "operator",
          "string",
          "concatenation",
          "navigation"
        ]
      },
      "suite": "String Operators",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [
          "John Doe"
        ],
        "time": 0.1685409999999976
      },
      "compilerResult": {
        "success": true,
        "value": [
          "John Doe"
        ],
        "time": 0.11529200000000017
      }
    },
    {
      "test": {
        "name": "concatenation with empty returns empty",
        "expression": "name & ' ' & missing",
        "input": [
          {
            "name": "John"
          }
        ],
        "expected": [],
        "tags": [
          "operator",
          "string",
          "concatenation",
          "empty"
        ]
      },
      "suite": "String Operators",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [],
        "time": 0.02166599999999974
      },
      "compilerResult": {
        "success": true,
        "value": [],
        "time": 0.01425000000000054
      }
    },
    {
      "test": {
        "name": "concatenation with empty left operand",
        "expression": "{} & 'test'",
        "input": [],
        "expected": [],
        "tags": [
          "operator",
          "string",
          "concatenation",
          "empty"
        ]
      },
      "suite": "String Operators",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [],
        "time": 0.008083000000002727
      },
      "compilerResult": {
        "success": true,
        "value": [],
        "time": 0.006707999999999714
      }
    },
    {
      "test": {
        "name": "concatenation with multiple items",
        "expression": "names & ' and '",
        "input": [
          {
            "names": [
              "Alice",
              "Bob"
            ]
          }
        ],
        "expected": [],
        "tags": [
          "operator",
          "string",
          "concatenation",
          "collection"
        ],
        "skip": {
          "interpreter": true,
          "reason": "String concatenation with multiple items needs clarification"
        }
      },
      "suite": "String Operators",
      "matched": false,
      "compilerResult": {
        "success": false,
        "error": "Expected single value but got 2 items",
        "time": 0.052417000000001934
      }
    },
    {
      "test": {
        "name": "is - string type",
        "expression": "'hello' is String",
        "input": [],
        "expected": [
          true
        ],
        "tags": [
          "operator",
          "type",
          "is"
        ]
      },
      "suite": "Type Checking",
      "matched": false,
      "interpreterResult": {
        "success": true,
        "value": [
          true
        ],
        "time": 0.09662499999999952
      },
      "compilerResult": {
        "success": false,
        "error": "is operator requires special compilation",
        "time": 0.0796670000000006
      }
    },
    {
      "test": {
        "name": "is - integer type",
        "expression": "42 is Integer",
        "input": [],
        "expected": [
          true
        ],
        "tags": [
          "operator",
          "type",
          "is"
        ]
      },
      "suite": "Type Checking",
      "matched": false,
      "interpreterResult": {
        "success": true,
        "value": [
          true
        ],
        "time": 0.012166000000000565
      },
      "compilerResult": {
        "success": false,
        "error": "is operator requires special compilation",
        "time": 0.012374999999998693
      }
    },
    {
      "test": {
        "name": "is - decimal type",
        "expression": "3.14 is Decimal",
        "input": [],
        "expected": [
          true
        ],
        "tags": [
          "operator",
          "type",
          "is"
        ]
      },
      "suite": "Type Checking",
      "matched": false,
      "interpreterResult": {
        "success": true,
        "value": [
          true
        ],
        "time": 0.017291999999997643
      },
      "compilerResult": {
        "success": false,
        "error": "is operator requires special compilation",
        "time": 0.014082999999999402
      }
    },
    {
      "test": {
        "name": "is - boolean type",
        "expression": "true is Boolean",
        "input": [],
        "expected": [
          true
        ],
        "tags": [
          "operator",
          "type",
          "is"
        ]
      },
      "suite": "Type Checking",
      "matched": false,
      "interpreterResult": {
        "success": true,
        "value": [
          true
        ],
        "time": 0.008541999999998495
      },
      "compilerResult": {
        "success": false,
        "error": "is operator requires special compilation",
        "time": 0.008874999999999744
      }
    },
    {
      "test": {
        "name": "is - wrong type string",
        "expression": "'hello' is Integer",
        "input": [],
        "expected": [
          false
        ],
        "tags": [
          "operator",
          "type",
          "is"
        ]
      },
      "suite": "Type Checking",
      "matched": false,
      "interpreterResult": {
        "success": true,
        "value": [
          false
        ],
        "time": 0.011916999999996847
      },
      "compilerResult": {
        "success": false,
        "error": "is operator requires special compilation",
        "time": 0.008333000000000368
      }
    },
    {
      "test": {
        "name": "is - wrong type number",
        "expression": "42 is String",
        "input": [],
        "expected": [
          false
        ],
        "tags": [
          "operator",
          "type",
          "is"
        ]
      },
      "suite": "Type Checking",
      "matched": false,
      "interpreterResult": {
        "success": true,
        "value": [
          false
        ],
        "time": 0.010249999999999204
      },
      "compilerResult": {
        "success": false,
        "error": "is operator requires special compilation",
        "time": 0.005875000000003183
      }
    },
    {
      "test": {
        "name": "is - FHIR resource type true",
        "expression": "$this is Patient",
        "input": [],
        "context": {
          "variables": {
            "$this": [
              {
                "resourceType": "Patient",
                "name": "John"
              }
            ]
          }
        },
        "expected": [
          true
        ],
        "tags": [
          "operator",
          "type",
          "is",
          "fhir"
        ]
      },
      "suite": "Type Checking",
      "matched": false,
      "interpreterResult": {
        "success": true,
        "value": [],
        "time": 0.08633299999999977
      },
      "compilerResult": {
        "success": false,
        "error": "is operator requires special compilation",
        "time": 0.026666999999999774
      }
    },
    {
      "test": {
        "name": "is - FHIR resource type false",
        "expression": "$this is Observation",
        "input": [],
        "context": {
          "variables": {
            "$this": [
              {
                "resourceType": "Patient",
                "name": "John"
              }
            ]
          }
        },
        "expected": [
          false
        ],
        "tags": [
          "operator",
          "type",
          "is",
          "fhir"
        ]
      },
      "suite": "Type Checking",
      "matched": false,
      "interpreterResult": {
        "success": true,
        "value": [],
        "time": 0.007666000000000395
      },
      "compilerResult": {
        "success": false,
        "error": "is operator requires special compilation",
        "time": 0.006959000000001936
      }
    },
    {
      "test": {
        "name": "ofType - filter by FHIR type",
        "expression": "ofType(Patient)",
        "input": [
          {
            "resourceType": "Patient",
            "id": "1"
          },
          {
            "resourceType": "Observation",
            "id": "2"
          },
          {
            "resourceType": "Patient",
            "id": "3"
          }
        ],
        "expected": [
          {
            "resourceType": "Patient",
            "id": "1"
          },
          {
            "resourceType": "Patient",
            "id": "3"
          }
        ],
        "tags": [
          "function",
          "type",
          "ofType",
          "filter"
        ]
      },
      "suite": "Type Checking",
      "matched": false,
      "interpreterResult": {
        "success": true,
        "value": [
          {
            "resourceType": "Patient",
            "id": "1"
          },
          {
            "resourceType": "Patient",
            "id": "3"
          }
        ],
        "time": 0.06916599999999917
      },
      "compilerResult": {
        "success": false,
        "error": "Type reference cannot be evaluated: Patient",
        "time": 0.027916999999998637
      }
    },
    {
      "test": {
        "name": "ofType - no matches",
        "expression": "ofType(Patient)",
        "input": [
          {
            "resourceType": "Observation",
            "id": "1"
          }
        ],
        "expected": [],
        "tags": [
          "function",
          "type",
          "ofType",
          "filter",
          "empty"
        ]
      },
      "suite": "Type Checking",
      "matched": false,
      "interpreterResult": {
        "success": true,
        "value": [],
        "time": 0.00804199999999966
      },
      "compilerResult": {
        "success": false,
        "error": "Type reference cannot be evaluated: Patient",
        "time": 0.007708999999998412
      }
    },
    {
      "test": {
        "name": "index - first element",
        "expression": "$this[0]",
        "input": [
          10,
          20,
          30
        ],
        "expected": [
          10
        ],
        "tags": [
          "operator",
          "index",
          "array"
        ]
      },
      "suite": "Index Operators",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [],
        "time": 0.11695899999999781
      },
      "compilerResult": {
        "success": true,
        "value": [],
        "time": 0.08249999999999957
      }
    },
    {
      "test": {
        "name": "index - second element",
        "expression": "$this[1]",
        "input": [
          10,
          20,
          30
        ],
        "expected": [
          20
        ],
        "tags": [
          "operator",
          "index",
          "array"
        ]
      },
      "suite": "Index Operators",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [],
        "time": 0.04379199999999983
      },
      "compilerResult": {
        "success": true,
        "value": [],
        "time": 0.059290999999998206
      }
    },
    {
      "test": {
        "name": "index - third element",
        "expression": "$this[2]",
        "input": [
          10,
          20,
          30
        ],
        "expected": [
          30
        ],
        "tags": [
          "operator",
          "index",
          "array"
        ]
      },
      "suite": "Index Operators",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [],
        "time": 0.01216699999999804
      },
      "compilerResult": {
        "success": true,
        "value": [],
        "time": 0.007125000000002046
      }
    },
    {
      "test": {
        "name": "index - out of bounds positive",
        "expression": "$this[3]",
        "input": [
          10,
          20,
          30
        ],
        "expected": [],
        "tags": [
          "operator",
          "index",
          "array",
          "out-of-bounds"
        ]
      },
      "suite": "Index Operators",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [],
        "time": 0.017666999999999433
      },
      "compilerResult": {
        "success": true,
        "value": [],
        "time": 0.05029199999999889
      }
    },
    {
      "test": {
        "name": "index - out of bounds negative",
        "expression": "$this[-1]",
        "input": [
          10,
          20,
          30
        ],
        "expected": [],
        "tags": [
          "operator",
          "index",
          "array",
          "out-of-bounds"
        ]
      },
      "suite": "Index Operators",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [],
        "time": 0.10841599999999829
      },
      "compilerResult": {
        "success": true,
        "value": [],
        "time": 0.0572499999999998
      }
    },
    {
      "test": {
        "name": "index - complex expression",
        "expression": "items[index]",
        "input": [
          {
            "items": [
              "a",
              "b",
              "c"
            ],
            "index": 1
          }
        ],
        "expected": [
          "b"
        ],
        "tags": [
          "operator",
          "index",
          "array",
          "navigation"
        ]
      },
      "suite": "Index Operators",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [],
        "time": 0.02045800000000142
      },
      "compilerResult": {
        "success": true,
        "value": [],
        "time": 0.008124999999999716
      }
    },
    {
      "test": {
        "name": "index on property navigation",
        "expression": "names[0]",
        "input": [
          {
            "names": [
              "John",
              "Jane",
              "Bob"
            ]
          }
        ],
        "expected": [
          "John"
        ],
        "tags": [
          "operator",
          "index",
          "navigation"
        ]
      },
      "suite": "Index Operators",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [
          "John"
        ],
        "time": 0.011916000000002924
      },
      "compilerResult": {
        "success": true,
        "value": [
          "John"
        ],
        "time": 0.01012500000000216
      }
    },
    {
      "test": {
        "name": "index on property navigation - last",
        "expression": "names[2]",
        "input": [
          {
            "names": [
              "John",
              "Jane",
              "Bob"
            ]
          }
        ],
        "expected": [
          "Bob"
        ],
        "tags": [
          "operator",
          "index",
          "navigation"
        ]
      },
      "suite": "Index Operators",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [
          "Bob"
        ],
        "time": 0.008457999999997412
      },
      "compilerResult": {
        "success": true,
        "value": [
          "Bob"
        ],
        "time": 0.012208000000001107
      }
    },
    {
      "test": {
        "name": "index out of bounds on property",
        "expression": "names[10]",
        "input": [
          {
            "names": [
              "John",
              "Jane",
              "Bob"
            ]
          }
        ],
        "expected": [],
        "tags": [
          "operator",
          "index",
          "navigation",
          "out-of-bounds"
        ]
      },
      "suite": "Index Operators",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [],
        "time": 0.012166000000000565
      },
      "compilerResult": {
        "success": true,
        "value": [],
        "time": 0.008374999999997357
      }
    },
    {
      "test": {
        "name": "addition - integers",
        "expression": "2 + 3",
        "input": [],
        "expected": [
          5
        ],
        "tags": [
          "operator",
          "arithmetic",
          "addition"
        ]
      },
      "suite": "Arithmetic Operators",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [
          5
        ],
        "time": 0.039166999999999064
      },
      "compilerResult": {
        "success": true,
        "value": [
          5
        ],
        "time": 0.06345800000000068
      }
    },
    {
      "test": {
        "name": "addition - decimals",
        "expression": "2.5 + 3.5",
        "input": [],
        "expected": [
          6
        ],
        "tags": [
          "operator",
          "arithmetic",
          "addition",
          "decimal"
        ]
      },
      "suite": "Arithmetic Operators",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [
          6
        ],
        "time": 0.01620799999999889
      },
      "compilerResult": {
        "success": true,
        "value": [
          6
        ],
        "time": 0.009208000000000993
      }
    },
    {
      "test": {
        "name": "subtraction - integers",
        "expression": "5 - 3",
        "input": [],
        "expected": [
          2
        ],
        "tags": [
          "operator",
          "arithmetic",
          "subtraction"
        ]
      },
      "suite": "Arithmetic Operators",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [
          2
        ],
        "time": 0.021041999999997785
      },
      "compilerResult": {
        "success": true,
        "value": [
          2
        ],
        "time": 0.03216600000000014
      }
    },
    {
      "test": {
        "name": "subtraction - decimals",
        "expression": "1.5 - 0.5",
        "input": [],
        "expected": [
          1
        ],
        "tags": [
          "operator",
          "arithmetic",
          "subtraction",
          "decimal"
        ]
      },
      "suite": "Arithmetic Operators",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [
          1
        ],
        "time": 0.005624999999998437
      },
      "compilerResult": {
        "success": true,
        "value": [
          1
        ],
        "time": 0.005207999999999657
      }
    },
    {
      "test": {
        "name": "multiplication",
        "expression": "4 * 3",
        "input": [],
        "expected": [
          12
        ],
        "tags": [
          "operator",
          "arithmetic",
          "multiplication"
        ]
      },
      "suite": "Arithmetic Operators",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [
          12
        ],
        "time": 0.018416000000001986
      },
      "compilerResult": {
        "success": true,
        "value": [
          12
        ],
        "time": 0.030999999999998806
      }
    },
    {
      "test": {
        "name": "multiplication - decimals",
        "expression": "2.5 * 2",
        "input": [],
        "expected": [
          5
        ],
        "tags": [
          "operator",
          "arithmetic",
          "multiplication",
          "decimal"
        ]
      },
      "suite": "Arithmetic Operators",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [
          5
        ],
        "time": 0.005209000000000685
      },
      "compilerResult": {
        "success": true,
        "value": [
          5
        ],
        "time": 0.007124999999998494
      }
    },
    {
      "test": {
        "name": "division",
        "expression": "10 / 2",
        "input": [],
        "expected": [
          5
        ],
        "tags": [
          "operator",
          "arithmetic",
          "division"
        ]
      },
      "suite": "Arithmetic Operators",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [
          5
        ],
        "time": 0.04533400000000043
      },
      "compilerResult": {
        "success": true,
        "value": [
          5
        ],
        "time": 0.04216599999999815
      }
    },
    {
      "test": {
        "name": "division - decimals",
        "expression": "7.5 / 2.5",
        "input": [],
        "expected": [
          3
        ],
        "tags": [
          "operator",
          "arithmetic",
          "division",
          "decimal"
        ]
      },
      "suite": "Arithmetic Operators",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [
          3
        ],
        "time": 0.010625000000000995
      },
      "compilerResult": {
        "success": true,
        "value": [
          3
        ],
        "time": 0.009790999999999883
      }
    },
    {
      "test": {
        "name": "integer division",
        "expression": "7 div 3",
        "input": [],
        "expected": [
          2
        ],
        "tags": [
          "operator",
          "arithmetic",
          "div"
        ]
      },
      "suite": "Arithmetic Operators",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [
          2
        ],
        "time": 0.02633300000000105
      },
      "compilerResult": {
        "success": true,
        "value": [
          2
        ],
        "time": 0.05054100000000261
      }
    },
    {
      "test": {
        "name": "integer division - larger",
        "expression": "10 div 3",
        "input": [],
        "expected": [
          3
        ],
        "tags": [
          "operator",
          "arithmetic",
          "div"
        ]
      },
      "suite": "Arithmetic Operators",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [
          3
        ],
        "time": 0.033250000000002444
      },
      "compilerResult": {
        "success": true,
        "value": [
          3
        ],
        "time": 0.015333999999999293
      }
    },
    {
      "test": {
        "name": "modulo",
        "expression": "7 mod 3",
        "input": [],
        "expected": [
          1
        ],
        "tags": [
          "operator",
          "arithmetic",
          "mod"
        ]
      },
      "suite": "Arithmetic Operators",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [
          1
        ],
        "time": 0.0643749999999983
      },
      "compilerResult": {
        "success": true,
        "value": [
          1
        ],
        "time": 0.061166000000000054
      }
    },
    {
      "test": {
        "name": "modulo - larger",
        "expression": "10 mod 3",
        "input": [],
        "expected": [
          1
        ],
        "tags": [
          "operator",
          "arithmetic",
          "mod"
        ]
      },
      "suite": "Arithmetic Operators",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [
          1
        ],
        "time": 0.008707999999998606
      },
      "compilerResult": {
        "success": true,
        "value": [
          1
        ],
        "time": 0.005334000000001282
      }
    },
    {
      "test": {
        "name": "arithmetic with navigation",
        "expression": "value + 3",
        "input": [
          {
            "value": 5
          }
        ],
        "expected": [
          8
        ],
        "tags": [
          "operator",
          "arithmetic",
          "navigation"
        ]
      },
      "suite": "Arithmetic Operators",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [
          8
        ],
        "time": 0.016166999999999376
      },
      "compilerResult": {
        "success": true,
        "value": [
          8
        ],
        "time": 0.009582999999999231
      }
    },
    {
      "test": {
        "name": "unary plus - positive",
        "expression": "+42",
        "input": [],
        "expected": [
          42
        ],
        "tags": [
          "operator",
          "arithmetic",
          "unary",
          "plus"
        ]
      },
      "suite": "Arithmetic Operators",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [
          42
        ],
        "time": 0.016707999999997725
      },
      "compilerResult": {
        "success": true,
        "value": [
          42
        ],
        "time": 0.029834000000001026
      }
    },
    {
      "test": {
        "name": "unary plus - negative",
        "expression": "+(-5)",
        "input": [],
        "expected": [
          -5
        ],
        "tags": [
          "operator",
          "arithmetic",
          "unary",
          "plus"
        ]
      },
      "suite": "Arithmetic Operators",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [
          -5
        ],
        "time": 0.00837500000000091
      },
      "compilerResult": {
        "success": true,
        "value": [
          -5
        ],
        "time": 0.012250000000001648
      }
    },
    {
      "test": {
        "name": "unary minus - positive",
        "expression": "-42",
        "input": [],
        "expected": [
          -42
        ],
        "tags": [
          "operator",
          "arithmetic",
          "unary",
          "minus"
        ]
      },
      "suite": "Arithmetic Operators",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [
          -42
        ],
        "time": 0.005416999999997785
      },
      "compilerResult": {
        "success": true,
        "value": [
          -42
        ],
        "time": 0.0035829999999990036
      }
    },
    {
      "test": {
        "name": "unary minus - double negative",
        "expression": "-(-5)",
        "input": [],
        "expected": [
          5
        ],
        "tags": [
          "operator",
          "arithmetic",
          "unary",
          "minus"
        ]
      },
      "suite": "Arithmetic Operators",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [
          5
        ],
        "time": 0.014417000000001678
      },
      "compilerResult": {
        "success": true,
        "value": [
          5
        ],
        "time": 0.005457999999997298
      }
    },
    {
      "test": {
        "name": "union - numbers",
        "expression": "{1, 2} | {3, 4}",
        "input": [],
        "expected": [
          1,
          2,
          3,
          4
        ],
        "tags": [
          "operator",
          "union",
          "collection"
        ]
      },
      "suite": "Union Operator",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [
          1,
          2,
          3,
          4
        ],
        "time": 0.06562499999999716
      },
      "compilerResult": {
        "success": true,
        "value": [
          1,
          2,
          3,
          4
        ],
        "time": 0.08762499999999918
      }
    },
    {
      "test": {
        "name": "union - strings",
        "expression": "{'a', 'b'} | {'c', 'd'}",
        "input": [],
        "expected": [
          "a",
          "b",
          "c",
          "d"
        ],
        "tags": [
          "operator",
          "union",
          "collection",
          "string"
        ]
      },
      "suite": "Union Operator",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [
          "a",
          "b",
          "c",
          "d"
        ],
        "time": 0.013417000000000456
      },
      "compilerResult": {
        "success": true,
        "value": [
          "a",
          "b",
          "c",
          "d"
        ],
        "time": 0.029042000000000456
      }
    },
    {
      "test": {
        "name": "union - multiple",
        "expression": "{1} | {2} | {3}",
        "input": [],
        "expected": [
          1,
          2,
          3
        ],
        "tags": [
          "operator",
          "union",
          "collection",
          "multiple"
        ]
      },
      "suite": "Union Operator",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [
          1,
          2,
          3
        ],
        "time": 0.013500000000000512
      },
      "compilerResult": {
        "success": true,
        "value": [
          1,
          2,
          3
        ],
        "time": 0.02187499999999787
      }
    },
    {
      "test": {
        "name": "union with navigation",
        "expression": "a | b | c",
        "input": [
          {
            "a": 1,
            "b": 2,
            "c": 3
          }
        ],
        "expected": [
          1,
          2,
          3
        ],
        "tags": [
          "operator",
          "union",
          "navigation"
        ]
      },
      "suite": "Union Operator",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [
          1,
          2,
          3
        ],
        "time": 0.018750000000004263
      },
      "compilerResult": {
        "success": true,
        "value": [
          1,
          2,
          3
        ],
        "time": 0.0098339999999979
      }
    },
    {
      "test": {
        "name": "chained functions",
        "expression": "where(age > 25).select(name)",
        "input": [
          {
            "name": "John",
            "age": 30
          },
          {
            "name": "Jane",
            "age": 25
          },
          {
            "name": "Bob",
            "age": 35
          }
        ],
        "expected": [
          "John",
          "Bob"
        ],
        "tags": [
          "complex",
          "chain",
          "function"
        ]
      },
      "suite": "Complex Expressions",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [
          "John",
          "Bob"
        ],
        "time": 0.12762500000000188
      },
      "compilerResult": {
        "success": true,
        "value": [
          "John",
          "Bob"
        ],
        "time": 0.11608300000000327
      }
    },
    {
      "test": {
        "name": "navigation with filter",
        "expression": "patients.where(active).name",
        "input": [
          {
            "patients": [
              {
                "name": "John",
                "active": true
              },
              {
                "name": "Jane",
                "active": false
              },
              {
                "name": "Bob",
                "active": true
              }
            ]
          }
        ],
        "expected": [
          "John",
          "Bob"
        ],
        "tags": [
          "complex",
          "navigation",
          "filter"
        ]
      },
      "suite": "Complex Expressions",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [
          "John",
          "Bob"
        ],
        "time": 0.02087500000000375
      },
      "compilerResult": {
        "success": true,
        "value": [
          "John",
          "Bob"
        ],
        "time": 0.0159580000000048
      }
    },
    {
      "test": {
        "name": "arithmetic in comparison",
        "expression": "(a + b) * 2 > 10",
        "input": [
          {
            "a": 5,
            "b": 3
          }
        ],
        "expected": [
          true
        ],
        "tags": [
          "complex",
          "arithmetic",
          "comparison"
        ]
      },
      "suite": "Complex Expressions",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [
          true
        ],
        "time": 0.0245829999999998
      },
      "compilerResult": {
        "success": true,
        "value": [
          true
        ],
        "time": 0.021791000000000338
      }
    },
    {
      "test": {
        "name": "nested navigation",
        "expression": "name.where(use = 'official').given",
        "input": [
          {
            "name": [
              {
                "use": "official",
                "given": [
                  "John"
                ],
                "family": "Doe"
              },
              {
                "use": "nickname",
                "given": [
                  "Johnny"
                ],
                "family": "D"
              }
            ]
          }
        ],
        "expected": [
          "John"
        ],
        "tags": [
          "complex",
          "navigation",
          "filter"
        ]
      },
      "suite": "Complex Expressions",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [
          "John"
        ],
        "time": 0.026457999999998094
      },
      "compilerResult": {
        "success": true,
        "value": [
          "John"
        ],
        "time": 0.03966599999999687
      }
    },
    {
      "test": {
        "name": "simple property access",
        "expression": "name",
        "input": [
          {
            "name": "John"
          }
        ],
        "expected": [
          "John"
        ],
        "tags": [
          "navigation",
          "property"
        ]
      },
      "suite": "Property Navigation",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [
          "John"
        ],
        "time": 0.0056659999999979505
      },
      "compilerResult": {
        "success": true,
        "value": [
          "John"
        ],
        "time": 0.0030830000000037217
      }
    },
    {
      "test": {
        "name": "missing property returns empty",
        "expression": "name",
        "input": [
          {
            "age": 30
          }
        ],
        "expected": [],
        "tags": [
          "navigation",
          "property",
          "empty"
        ]
      },
      "suite": "Property Navigation",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [],
        "time": 0.0036249999999995453
      },
      "compilerResult": {
        "success": true,
        "value": [],
        "time": 0.00274999999999892
      }
    },
    {
      "test": {
        "name": "navigate multiple items",
        "expression": "name",
        "input": [
          {
            "name": "John"
          },
          {
            "name": "Jane"
          },
          {
            "age": 30
          }
        ],
        "expected": [
          "John",
          "Jane"
        ],
        "tags": [
          "navigation",
          "property",
          "multiple"
        ]
      },
      "suite": "Property Navigation",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [
          "John",
          "Jane"
        ],
        "time": 0.004750000000001364
      },
      "compilerResult": {
        "success": true,
        "value": [
          "John",
          "Jane"
        ],
        "time": 0.0036250000000066507
      }
    },
    {
      "test": {
        "name": "flatten array properties",
        "expression": "name",
        "input": [
          {
            "name": [
              {
                "given": [
                  "John",
                  "J"
                ],
                "family": "Doe"
              },
              {
                "given": [
                  "Jane"
                ],
                "family": "Smith"
              }
            ]
          }
        ],
        "expected": [
          {
            "given": [
              "John",
              "J"
            ],
            "family": "Doe"
          },
          {
            "given": [
              "Jane"
            ],
            "family": "Smith"
          }
        ],
        "tags": [
          "navigation",
          "property",
          "array",
          "flatten"
        ]
      },
      "suite": "Property Navigation",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [
          {
            "given": [
              "John",
              "J"
            ],
            "family": "Doe"
          },
          {
            "given": [
              "Jane"
            ],
            "family": "Smith"
          }
        ],
        "time": 0.0035420000000030427
      },
      "compilerResult": {
        "success": true,
        "value": [
          {
            "given": [
              "John",
              "J"
            ],
            "family": "Doe"
          },
          {
            "given": [
              "Jane"
            ],
            "family": "Smith"
          }
        ],
        "time": 0.003375000000005457
      }
    },
    {
      "test": {
        "name": "dot navigation - simple",
        "expression": "patient.name",
        "input": [
          {
            "patient": {
              "name": "John"
            }
          }
        ],
        "expected": [
          "John"
        ],
        "tags": [
          "navigation",
          "dot",
          "chain"
        ]
      },
      "suite": "Property Navigation",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [
          "John"
        ],
        "time": 0.009917000000001508
      },
      "compilerResult": {
        "success": true,
        "value": [
          "John"
        ],
        "time": 0.009666000000002839
      }
    },
    {
      "test": {
        "name": "dot navigation - deep",
        "expression": "patient.name.given",
        "input": [
          {
            "patient": {
              "name": {
                "given": [
                  "John",
                  "J"
                ],
                "family": "Doe"
              }
            }
          }
        ],
        "expected": [
          "John",
          "J"
        ],
        "tags": [
          "navigation",
          "dot",
          "chain",
          "deep"
        ]
      },
      "suite": "Property Navigation",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [
          "John",
          "J"
        ],
        "time": 0.01983300000000554
      },
      "compilerResult": {
        "success": true,
        "value": [
          "John",
          "J"
        ],
        "time": 0.0105829999999969
      }
    },
    {
      "test": {
        "name": "dot navigation - empty intermediate",
        "expression": "patient.name.given",
        "input": [
          {
            "patient": {}
          }
        ],
        "expected": [],
        "tags": [
          "navigation",
          "dot",
          "chain",
          "empty"
        ]
      },
      "suite": "Property Navigation",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [],
        "time": 0.008791000000002214
      },
      "compilerResult": {
        "success": true,
        "value": [],
        "time": 0.03249999999999886
      }
    },
    {
      "test": {
        "name": "dot navigation - multiple levels",
        "expression": "a.b.c",
        "input": [
          {
            "a": {
              "b": {
                "c": 42
              }
            }
          }
        ],
        "expected": [
          42
        ],
        "tags": [
          "navigation",
          "dot",
          "chain",
          "deep"
        ]
      },
      "suite": "Property Navigation",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [
          42
        ],
        "time": 0.009166999999997927
      },
      "compilerResult": {
        "success": true,
        "value": [
          42
        ],
        "time": 0.018916999999994744
      }
    },
    {
      "test": {
        "name": "$this with simple value",
        "expression": "$this",
        "input": [],
        "context": {
          "rootContext": [
            42
          ]
        },
        "expected": [
          42
        ],
        "tags": [
          "variable",
          "$this"
        ],
        "skip": {
          "interpreter": true,
          "compiler": true,
          "reason": "$this requires special context setup"
        }
      },
      "suite": "Variables",
      "matched": false
    },
    {
      "test": {
        "name": "$this with object",
        "expression": "$this.name",
        "input": [],
        "context": {
          "rootContext": [
            {
              "name": "John"
            }
          ]
        },
        "expected": [
          "John"
        ],
        "tags": [
          "variable",
          "$this",
          "navigation"
        ],
        "skip": {
          "interpreter": true,
          "compiler": true,
          "reason": "$this requires special context setup"
        }
      },
      "suite": "Variables",
      "matched": false
    },
    {
      "test": {
        "name": "$index in context",
        "expression": "$index",
        "input": [],
        "context": {
          "env": {
            "$index": 5
          }
        },
        "expected": [
          5
        ],
        "tags": [
          "variable",
          "$index"
        ]
      },
      "suite": "Variables",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [
          5
        ],
        "time": 0.019167000000003043
      },
      "compilerResult": {
        "success": true,
        "value": [
          5
        ],
        "time": 0.01666699999999821
      }
    },
    {
      "test": {
        "name": "user-defined variable",
        "expression": "%myVar",
        "input": [],
        "context": {
          "variables": {
            "myVar": [
              1,
              2,
              3
            ]
          }
        },
        "expected": [
          1,
          2,
          3
        ],
        "tags": [
          "variable",
          "user-defined"
        ]
      },
      "suite": "Variables",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [
          1,
          2,
          3
        ],
        "time": 0.04416700000000162
      },
      "compilerResult": {
        "success": true,
        "value": [
          1,
          2,
          3
        ],
        "time": 0.02504199999999912
      }
    },
    {
      "test": {
        "name": "undefined variable returns empty",
        "expression": "%undefinedVar",
        "input": [],
        "expected": [],
        "tags": [
          "variable",
          "undefined",
          "empty"
        ]
      },
      "suite": "Variables",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [],
        "time": 0.008833000000002755
      },
      "compilerResult": {
        "success": true,
        "value": [],
        "time": 0.0035829999999990036
      }
    },
    {
      "test": {
        "name": "$this in select expression",
        "expression": "name.select($this)",
        "input": [
          {
            "name": [
              1
            ]
          },
          {
            "name": [
              2
            ]
          }
        ],
        "expected": [
          1,
          2
        ],
        "tags": [
          "variable",
          "$this",
          "select"
        ]
      },
      "suite": "Variables",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [
          1,
          2
        ],
        "time": 0.0159580000000048
      },
      "compilerResult": {
        "success": true,
        "value": [
          1,
          2
        ],
        "time": 0.021832999999993774
      }
    },
    {
      "test": {
        "name": "$this in nested navigation",
        "expression": "name.given.select($this)",
        "input": [
          {
            "name": [
              {
                "given": [
                  1
                ]
              }
            ]
          },
          {
            "name": [
              {
                "given": [
                  2
                ]
              }
            ]
          }
        ],
        "expected": [
          1,
          2
        ],
        "tags": [
          "variable",
          "$this",
          "navigation",
          "select"
        ]
      },
      "suite": "Variables",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [
          1,
          2
        ],
        "time": 0.017958999999997616
      },
      "compilerResult": {
        "success": true,
        "value": [
          1,
          2
        ],
        "time": 0.019332999999996048
      }
    },
    {
      "test": {
        "name": "%context variable",
        "expression": "%context",
        "input": [
          {
            "id": "123"
          }
        ],
        "expected": [
          {
            "id": "123"
          }
        ],
        "tags": [
          "variable",
          "%context"
        ]
      },
      "suite": "Variables",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [],
        "time": 0.004750000000001364
      },
      "compilerResult": {
        "success": true,
        "value": [],
        "time": 0.0026249999999947704
      }
    },
    {
      "test": {
        "name": "empty - empty collection",
        "expression": "{}.empty()",
        "input": [],
        "expected": [
          true
        ],
        "tags": [
          "function",
          "existence",
          "empty"
        ]
      },
      "suite": "Functions - Existence and Aggregates",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [
          true
        ],
        "time": 0.06158299999999883
      },
      "compilerResult": {
        "success": true,
        "value": [
          true
        ],
        "time": 0.050041000000000224
      }
    },
    {
      "test": {
        "name": "empty - missing property",
        "expression": "missing.empty()",
        "input": [],
        "expected": [
          true
        ],
        "tags": [
          "function",
          "existence",
          "empty"
        ]
      },
      "suite": "Functions - Existence and Aggregates",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [
          true
        ],
        "time": 0.020000000000003126
      },
      "compilerResult": {
        "success": true,
        "value": [
          true
        ],
        "time": 0.012708999999993864
      }
    },
    {
      "test": {
        "name": "empty - non-empty",
        "expression": "name.empty()",
        "input": [
          {
            "name": "John"
          }
        ],
        "expected": [
          false
        ],
        "tags": [
          "function",
          "existence",
          "empty"
        ]
      },
      "suite": "Functions - Existence and Aggregates",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [
          false
        ],
        "time": 0.008499999999997954
      },
      "compilerResult": {
        "success": true,
        "value": [
          false
        ],
        "time": 0.008499999999997954
      }
    },
    {
      "test": {
        "name": "exists - non-empty",
        "expression": "name.exists()",
        "input": [
          {
            "name": "John"
          }
        ],
        "expected": [
          true
        ],
        "tags": [
          "function",
          "existence",
          "exists"
        ]
      },
      "suite": "Functions - Existence and Aggregates",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [
          true
        ],
        "time": 0.07050000000000267
      },
      "compilerResult": {
        "success": true,
        "value": [
          true
        ],
        "time": 0.0519170000000031
      }
    },
    {
      "test": {
        "name": "exists - empty",
        "expression": "missing.exists()",
        "input": [],
        "expected": [
          false
        ],
        "tags": [
          "function",
          "existence",
          "exists"
        ]
      },
      "suite": "Functions - Existence and Aggregates",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [
          false
        ],
        "time": 0.009042000000000883
      },
      "compilerResult": {
        "success": true,
        "value": [
          false
        ],
        "time": 0.01270900000000097
      }
    },
    {
      "test": {
        "name": "exists - with criteria true",
        "expression": "values.exists($this > 3)",
        "input": [
          {
            "values": [
              1,
              2,
              3,
              4,
              5
            ]
          }
        ],
        "expected": [
          true
        ],
        "tags": [
          "function",
          "existence",
          "exists",
          "criteria"
        ]
      },
      "suite": "Functions - Existence and Aggregates",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [
          true
        ],
        "time": 0.021166000000000906
      },
      "compilerResult": {
        "success": true,
        "value": [
          true
        ],
        "time": 0.04220799999999514
      }
    },
    {
      "test": {
        "name": "exists - with criteria false",
        "expression": "values.exists($this > 10)",
        "input": [
          {
            "values": [
              1,
              2,
              3,
              4,
              5
            ]
          }
        ],
        "expected": [
          false
        ],
        "tags": [
          "function",
          "existence",
          "exists",
          "criteria"
        ]
      },
      "suite": "Functions - Existence and Aggregates",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [
          false
        ],
        "time": 0.017916999999997074
      },
      "compilerResult": {
        "success": true,
        "value": [
          false
        ],
        "time": 0.019584000000001822
      }
    },
    {
      "test": {
        "name": "count - items",
        "expression": "values.count()",
        "input": [
          {
            "values": [
              1,
              2,
              3
            ]
          }
        ],
        "expected": [
          3
        ],
        "tags": [
          "function",
          "aggregate",
          "count"
        ]
      },
      "suite": "Functions - Existence and Aggregates",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [
          3
        ],
        "time": 0.02733299999999872
      },
      "compilerResult": {
        "success": true,
        "value": [
          3
        ],
        "time": 0.03337499999999949
      }
    },
    {
      "test": {
        "name": "count - empty",
        "expression": "{}.count()",
        "input": [],
        "expected": [
          0
        ],
        "tags": [
          "function",
          "aggregate",
          "count"
        ]
      },
      "suite": "Functions - Existence and Aggregates",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [
          0
        ],
        "time": 0.014415999999997098
      },
      "compilerResult": {
        "success": true,
        "value": [
          0
        ],
        "time": 0.008791999999999689
      }
    },
    {
      "test": {
        "name": "all - criteria true",
        "expression": "values.all($this mod 2 = 0)",
        "input": [
          {
            "values": [
              2,
              4,
              6,
              8
            ]
          }
        ],
        "expected": [
          true
        ],
        "tags": [
          "function",
          "aggregate",
          "all"
        ]
      },
      "suite": "Functions - Existence and Aggregates",
      "matched": false,
      "interpreterResult": {
        "success": true,
        "value": [
          true
        ],
        "time": 0.04854199999999764
      },
      "compilerResult": {
        "success": false,
        "error": "Compiler not implemented",
        "time": 0.023958000000000368
      }
    },
    {
      "test": {
        "name": "all - criteria false",
        "expression": "values.all($this > 5)",
        "input": [
          {
            "values": [
              2,
              4,
              6,
              8
            ]
          }
        ],
        "expected": [
          false
        ],
        "tags": [
          "function",
          "aggregate",
          "all"
        ]
      },
      "suite": "Functions - Existence and Aggregates",
      "matched": false,
      "interpreterResult": {
        "success": true,
        "value": [
          false
        ],
        "time": 0.014875000000003524
      },
      "compilerResult": {
        "success": false,
        "error": "Compiler not implemented",
        "time": 0.018625000000000114
      }
    },
    {
      "test": {
        "name": "allTrue - all true",
        "expression": "values.allTrue()",
        "input": [
          {
            "values": [
              true,
              true,
              true
            ]
          }
        ],
        "expected": [
          true
        ],
        "tags": [
          "function",
          "aggregate",
          "boolean",
          "allTrue"
        ]
      },
      "suite": "Functions - Existence and Aggregates",
      "matched": false,
      "interpreterResult": {
        "success": true,
        "value": [
          true
        ],
        "time": 0.06524999999999892
      },
      "compilerResult": {
        "success": false,
        "error": "Compiler not implemented",
        "time": 0.029666000000005965
      }
    },
    {
      "test": {
        "name": "allTrue - contains false",
        "expression": "values.allTrue()",
        "input": [
          {
            "values": [
              true,
              false,
              true
            ]
          }
        ],
        "expected": [
          false
        ],
        "tags": [
          "function",
          "aggregate",
          "boolean",
          "allTrue"
        ]
      },
      "suite": "Functions - Existence and Aggregates",
      "matched": false,
      "interpreterResult": {
        "success": true,
        "value": [
          false
        ],
        "time": 0.01274999999999693
      },
      "compilerResult": {
        "success": false,
        "error": "Compiler not implemented",
        "time": 0.006500000000002615
      }
    },
    {
      "test": {
        "name": "anyTrue - contains true",
        "expression": "values.anyTrue()",
        "input": [
          {
            "values": [
              false,
              true,
              false
            ]
          }
        ],
        "expected": [
          true
        ],
        "tags": [
          "function",
          "aggregate",
          "boolean",
          "anyTrue"
        ]
      },
      "suite": "Functions - Existence and Aggregates",
      "matched": false,
      "interpreterResult": {
        "success": true,
        "value": [
          true
        ],
        "time": 0.05391699999999844
      },
      "compilerResult": {
        "success": false,
        "error": "Compiler not implemented",
        "time": 0.01504200000000111
      }
    },
    {
      "test": {
        "name": "anyTrue - all false",
        "expression": "values.anyTrue()",
        "input": [
          {
            "values": [
              false,
              false,
              false
            ]
          }
        ],
        "expected": [
          false
        ],
        "tags": [
          "function",
          "aggregate",
          "boolean",
          "anyTrue"
        ]
      },
      "suite": "Functions - Existence and Aggregates",
      "matched": false,
      "interpreterResult": {
        "success": true,
        "value": [
          false
        ],
        "time": 0.010207999999998663
      },
      "compilerResult": {
        "success": false,
        "error": "Compiler not implemented",
        "time": 0.005957999999999686
      }
    },
    {
      "test": {
        "name": "anyFalse - contains false",
        "expression": "values.anyFalse()",
        "input": [
          {
            "values": [
              true,
              false,
              true
            ]
          }
        ],
        "expected": [
          true
        ],
        "tags": [
          "function",
          "aggregate",
          "boolean",
          "anyFalse"
        ]
      },
      "suite": "Functions - Existence and Aggregates",
      "matched": false,
      "interpreterResult": {
        "success": true,
        "value": [
          true
        ],
        "time": 0.02949999999999875
      },
      "compilerResult": {
        "success": false,
        "error": "Compiler not implemented",
        "time": 0.014833000000002983
      }
    },
    {
      "test": {
        "name": "anyFalse - all true",
        "expression": "values.anyFalse()",
        "input": [
          {
            "values": [
              true,
              true,
              true
            ]
          }
        ],
        "expected": [
          false
        ],
        "tags": [
          "function",
          "aggregate",
          "boolean",
          "anyFalse"
        ]
      },
      "suite": "Functions - Existence and Aggregates",
      "matched": false,
      "interpreterResult": {
        "success": true,
        "value": [
          false
        ],
        "time": 0.009292000000002076
      },
      "compilerResult": {
        "success": false,
        "error": "Compiler not implemented",
        "time": 0.006709000000000742
      }
    },
    {
      "test": {
        "name": "allFalse - all false",
        "expression": "values.allFalse()",
        "input": [
          {
            "values": [
              false,
              false,
              false
            ]
          }
        ],
        "expected": [
          true
        ],
        "tags": [
          "function",
          "aggregate",
          "boolean",
          "allFalse"
        ]
      },
      "suite": "Functions - Existence and Aggregates",
      "matched": false,
      "interpreterResult": {
        "success": true,
        "value": [
          true
        ],
        "time": 0.09262499999999818
      },
      "compilerResult": {
        "success": false,
        "error": "Compiler not implemented",
        "time": 0.027999999999998693
      }
    },
    {
      "test": {
        "name": "allFalse - contains true",
        "expression": "values.allFalse()",
        "input": [
          {
            "values": [
              false,
              true,
              false
            ]
          }
        ],
        "expected": [
          false
        ],
        "tags": [
          "function",
          "aggregate",
          "boolean",
          "allFalse"
        ]
      },
      "suite": "Functions - Existence and Aggregates",
      "matched": false,
      "interpreterResult": {
        "success": true,
        "value": [
          false
        ],
        "time": 0.027333999999996195
      },
      "compilerResult": {
        "success": false,
        "error": "Compiler not implemented",
        "time": 0.010374999999996248
      }
    },
    {
      "test": {
        "name": "distinct - removes duplicates",
        "expression": "values.distinct()",
        "input": [
          {
            "values": [
              1,
              2,
              2,
              3,
              3,
              3,
              4
            ]
          }
        ],
        "expected": [
          1,
          2,
          3,
          4
        ],
        "tags": [
          "function",
          "aggregate",
          "distinct"
        ]
      },
      "suite": "Functions - Existence and Aggregates",
      "matched": false,
      "interpreterResult": {
        "success": true,
        "value": [
          1,
          2,
          3,
          4
        ],
        "time": 0.09095899999999801
      },
      "compilerResult": {
        "success": false,
        "error": "Compiler not implemented",
        "time": 0.024292000000002645
      }
    },
    {
      "test": {
        "name": "isDistinct - no duplicates",
        "expression": "values.isDistinct()",
        "input": [
          {
            "values": [
              1,
              2,
              3,
              4
            ]
          }
        ],
        "expected": [
          true
        ],
        "tags": [
          "function",
          "aggregate",
          "isDistinct"
        ]
      },
      "suite": "Functions - Existence and Aggregates",
      "matched": false,
      "interpreterResult": {
        "success": true,
        "value": [
          true
        ],
        "time": 0.07508400000000393
      },
      "compilerResult": {
        "success": false,
        "error": "Compiler not implemented",
        "time": 0.05195799999999906
      }
    },
    {
      "test": {
        "name": "isDistinct - has duplicates",
        "expression": "values.isDistinct()",
        "input": [
          {
            "values": [
              1,
              2,
              2,
              3
            ]
          }
        ],
        "expected": [
          false
        ],
        "tags": [
          "function",
          "aggregate",
          "isDistinct"
        ]
      },
      "suite": "Functions - Existence and Aggregates",
      "matched": false,
      "interpreterResult": {
        "success": true,
        "value": [
          false
        ],
        "time": 0.030208999999999264
      },
      "compilerResult": {
        "success": false,
        "error": "Compiler not implemented",
        "time": 0.03608300000000497
      }
    },
    {
      "test": {
        "name": "intersect - common items",
        "expression": "{1, 2, 3, 4}.intersect({3, 4, 5, 6})",
        "input": [],
        "expected": [
          3,
          4
        ],
        "tags": [
          "function",
          "set",
          "intersect"
        ]
      },
      "suite": "Functions - Set Operations",
      "matched": false,
      "interpreterResult": {
        "success": true,
        "value": [
          3,
          4
        ],
        "time": 0.1059580000000011
      },
      "compilerResult": {
        "success": false,
        "error": "Function compile not implemented",
        "time": 0.05983299999999758
      }
    },
    {
      "test": {
        "name": "intersect - no common items",
        "expression": "{1, 2, 3}.intersect({4, 5, 6})",
        "input": [],
        "expected": [],
        "tags": [
          "function",
          "set",
          "intersect"
        ]
      },
      "suite": "Functions - Set Operations",
      "matched": false,
      "interpreterResult": {
        "success": true,
        "value": [],
        "time": 0.022500000000000853
      },
      "compilerResult": {
        "success": false,
        "error": "Function compile not implemented",
        "time": 0.014541999999998723
      }
    },
    {
      "test": {
        "name": "intersect - with empty",
        "expression": "{1, 2, 3}.intersect({})",
        "input": [],
        "expected": [],
        "tags": [
          "function",
          "set",
          "intersect",
          "empty"
        ]
      },
      "suite": "Functions - Set Operations",
      "matched": false,
      "interpreterResult": {
        "success": true,
        "value": [],
        "time": 0.012375000000005798
      },
      "compilerResult": {
        "success": false,
        "error": "Function compile not implemented",
        "time": 0.01345799999999997
      }
    },
    {
      "test": {
        "name": "exclude - remove items",
        "expression": "{1, 2, 3, 4}.exclude({3, 4})",
        "input": [],
        "expected": [
          1,
          2
        ],
        "tags": [
          "function",
          "set",
          "exclude"
        ]
      },
      "suite": "Functions - Set Operations",
      "matched": false,
      "interpreterResult": {
        "success": true,
        "value": [
          1,
          2
        ],
        "time": 0.057458000000004006
      },
      "compilerResult": {
        "success": false,
        "error": "Function compile not implemented",
        "time": 0.02737499999999926
      }
    },
    {
      "test": {
        "name": "exclude - remove non-existing",
        "expression": "{1, 2, 3}.exclude({4, 5})",
        "input": [],
        "expected": [
          1,
          2,
          3
        ],
        "tags": [
          "function",
          "set",
          "exclude"
        ]
      },
      "suite": "Functions - Set Operations",
      "matched": false,
      "interpreterResult": {
        "success": true,
        "value": [
          1,
          2,
          3
        ],
        "time": 0.023707999999999174
      },
      "compilerResult": {
        "success": false,
        "error": "Function compile not implemented",
        "time": 0.01841699999999946
      }
    },
    {
      "test": {
        "name": "exclude - with empty",
        "expression": "{1, 2, 3}.exclude({})",
        "input": [],
        "expected": [
          1,
          2,
          3
        ],
        "tags": [
          "function",
          "set",
          "exclude",
          "empty"
        ]
      },
      "suite": "Functions - Set Operations",
      "matched": false,
      "interpreterResult": {
        "success": true,
        "value": [
          1,
          2,
          3
        ],
        "time": 0.011375000000001023
      },
      "compilerResult": {
        "success": false,
        "error": "Function compile not implemented",
        "time": 0.033833000000001334
      }
    },
    {
      "test": {
        "name": "union - removes duplicates",
        "expression": "{1, 2, 3}.union({3, 4, 5})",
        "input": [],
        "expected": [
          1,
          2,
          3,
          4,
          5
        ],
        "tags": [
          "function",
          "set",
          "union"
        ]
      },
      "suite": "Functions - Set Operations",
      "matched": false,
      "interpreterResult": {
        "success": true,
        "value": [
          1,
          2,
          3,
          4,
          5
        ],
        "time": 0.08529099999999801
      },
      "compilerResult": {
        "success": false,
        "error": "Function compile not implemented",
        "time": 0.019415999999999656
      }
    },
    {
      "test": {
        "name": "union - no duplicates",
        "expression": "{1, 2, 3}.union({4, 5, 6})",
        "input": [],
        "expected": [
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "tags": [
          "function",
          "set",
          "union"
        ]
      },
      "suite": "Functions - Set Operations",
      "matched": false,
      "interpreterResult": {
        "success": true,
        "value": [
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "time": 0.020583000000002016
      },
      "compilerResult": {
        "success": false,
        "error": "Function compile not implemented",
        "time": 0.017583999999999378
      }
    },
    {
      "test": {
        "name": "combine - keeps duplicates",
        "expression": "{1, 2, 3}.combine({3, 4, 5})",
        "input": [],
        "expected": [
          1,
          2,
          3,
          3,
          4,
          5
        ],
        "tags": [
          "function",
          "set",
          "combine"
        ]
      },
      "suite": "Functions - Set Operations",
      "matched": false,
      "interpreterResult": {
        "success": true,
        "value": [
          1,
          2,
          3,
          3,
          4,
          5
        ],
        "time": 0.07883299999999593
      },
      "compilerResult": {
        "success": false,
        "error": "Function compile not implemented",
        "time": 0.034124999999995964
      }
    },
    {
      "test": {
        "name": "combine - multiple duplicates",
        "expression": "{1, 2, 2}.combine({2, 3, 3})",
        "input": [],
        "expected": [
          1,
          2,
          2,
          2,
          3,
          3
        ],
        "tags": [
          "function",
          "set",
          "combine"
        ]
      },
      "suite": "Functions - Set Operations",
      "matched": false,
      "interpreterResult": {
        "success": true,
        "value": [
          1,
          2,
          2,
          2,
          3,
          3
        ],
        "time": 0.04095899999999375
      },
      "compilerResult": {
        "success": false,
        "error": "Function compile not implemented",
        "time": 0.024959000000002618
      }
    },
    {
      "test": {
        "name": "iif - true condition",
        "expression": "iif(active, 'Active', 'Inactive')",
        "input": [
          {
            "active": true
          }
        ],
        "expected": [
          "Active"
        ],
        "tags": [
          "function",
          "conditional",
          "iif"
        ]
      },
      "suite": "Functions - Conditionals",
      "matched": false,
      "interpreterResult": {
        "success": true,
        "value": [
          "Active"
        ],
        "time": 0.04220899999999972
      },
      "compilerResult": {
        "success": false,
        "error": "Function compile not implemented",
        "time": 0.013540999999996473
      }
    },
    {
      "test": {
        "name": "iif - false condition",
        "expression": "iif(active, 'Active', 'Inactive')",
        "input": [
          {
            "active": false
          }
        ],
        "expected": [
          "Inactive"
        ],
        "tags": [
          "function",
          "conditional",
          "iif"
        ]
      },
      "suite": "Functions - Conditionals",
      "matched": false,
      "interpreterResult": {
        "success": true,
        "value": [
          "Inactive"
        ],
        "time": 0.014084000000003982
      },
      "compilerResult": {
        "success": false,
        "error": "Function compile not implemented",
        "time": 0.013125000000002274
      }
    },
    {
      "test": {
        "name": "iif - empty as false",
        "expression": "iif(active, 'Active', 'Inactive')",
        "input": [
          {}
        ],
        "expected": [
          "Inactive"
        ],
        "tags": [
          "function",
          "conditional",
          "iif",
          "empty"
        ]
      },
      "suite": "Functions - Conditionals",
      "matched": false,
      "interpreterResult": {
        "success": true,
        "value": [
          "Inactive"
        ],
        "time": 0.00837500000000091
      },
      "compilerResult": {
        "success": false,
        "error": "Function compile not implemented",
        "time": 0.0085420000000056
      }
    },
    {
      "test": {
        "name": "iif - lazy evaluation true",
        "expression": "iif(value != 0, 10 / value, 0)",
        "input": [
          {
            "value": 5
          }
        ],
        "expected": [
          2
        ],
        "tags": [
          "function",
          "conditional",
          "iif",
          "lazy"
        ]
      },
      "suite": "Functions - Conditionals",
      "matched": false,
      "interpreterResult": {
        "success": true,
        "value": [
          2
        ],
        "time": 0.026249999999997442
      },
      "compilerResult": {
        "success": false,
        "error": "Function compile not implemented",
        "time": 0.016958999999999946
      }
    },
    {
      "test": {
        "name": "iif - lazy evaluation false",
        "expression": "iif(value != 0, 10 / value, 0)",
        "input": [
          {
            "value": 0
          }
        ],
        "expected": [
          0
        ],
        "tags": [
          "function",
          "conditional",
          "iif",
          "lazy"
        ]
      },
      "suite": "Functions - Conditionals",
      "matched": false,
      "interpreterResult": {
        "success": true,
        "value": [
          0
        ],
        "time": 0.014958000000000027
      },
      "compilerResult": {
        "success": false,
        "error": "Function compile not implemented",
        "time": 0.02187500000000142
      }
    },
    {
      "test": {
        "name": "iif - with navigation",
        "expression": "iif(x > 0, x + 1, x - 1)",
        "input": [
          {
            "x": 5
          }
        ],
        "expected": [
          6
        ],
        "tags": [
          "function",
          "conditional",
          "iif",
          "navigation"
        ]
      },
      "suite": "Functions - Conditionals",
      "matched": false,
      "interpreterResult": {
        "success": true,
        "value": [
          6
        ],
        "time": 0.017958999999997616
      },
      "compilerResult": {
        "success": false,
        "error": "Function compile not implemented",
        "time": 0.014167000000000485
      }
    },
    {
      "test": {
        "name": "iif - negative value",
        "expression": "iif(x > 0, x + 1, x - 1)",
        "input": [
          {
            "x": -5
          }
        ],
        "expected": [
          -6
        ],
        "tags": [
          "function",
          "conditional",
          "iif",
          "navigation"
        ]
      },
      "suite": "Functions - Conditionals",
      "matched": false,
      "interpreterResult": {
        "success": true,
        "value": [
          -6
        ],
        "time": 0.013792000000002247
      },
      "compilerResult": {
        "success": false,
        "error": "Function compile not implemented",
        "time": 0.014000000000002899
      }
    },
    {
      "test": {
        "name": "defineVariable - simple assignment",
        "expression": "defineVariable('x', value).value + %x",
        "input": [
          {
            "value": 5
          }
        ],
        "expected": [
          10
        ],
        "tags": [
          "function",
          "variable",
          "defineVariable"
        ]
      },
      "suite": "Functions - defineVariable",
      "matched": false,
      "interpreterResult": {
        "success": true,
        "value": [
          10
        ],
        "time": 0.06645800000000435
      },
      "compilerResult": {
        "success": false,
        "error": "Function compile not implemented",
        "time": 0.03479199999999594
      }
    },
    {
      "test": {
        "name": "defineVariable - returns original input",
        "expression": "defineVariable('sum', a + b)",
        "input": [
          {
            "a": 1,
            "b": 2
          }
        ],
        "expected": [
          {
            "a": 1,
            "b": 2
          }
        ],
        "tags": [
          "function",
          "variable",
          "defineVariable"
        ]
      },
      "suite": "Functions - defineVariable",
      "matched": false,
      "interpreterResult": {
        "success": true,
        "value": [
          {
            "a": 1,
            "b": 2
          }
        ],
        "time": 0.015416000000001873
      },
      "compilerResult": {
        "success": false,
        "error": "Function compile not implemented",
        "time": 0.007999999999995566
      }
    },
    {
      "test": {
        "name": "defineVariable - complex filter",
        "expression": "defineVariable('officialName', name.where(use = 'official').first()).name.where(given != %officialName.given)",
        "input": [
          {
            "name": [
              {
                "use": "official",
                "given": [
                  "John"
                ]
              },
              {
                "use": "nickname",
                "given": [
                  "Johnny"
                ]
              }
            ]
          }
        ],
        "expected": [
          {
            "use": "nickname",
            "given": [
              "Johnny"
            ]
          }
        ],
        "tags": [
          "function",
          "variable",
          "defineVariable",
          "complex"
        ]
      },
      "suite": "Functions - defineVariable",
      "matched": false,
      "interpreterResult": {
        "success": true,
        "value": [
          {
            "use": "nickname",
            "given": [
              "Johnny"
            ]
          }
        ],
        "time": 0.0557500000000033
      },
      "compilerResult": {
        "success": false,
        "error": "Function compile not implemented",
        "time": 0.030208999999999264
      }
    },
    {
      "test": {
        "name": "defineVariable - chained definitions",
        "expression": "defineVariable('x', value).defineVariable('y', %x * 2).defineVariable('z', %x + %y)",
        "input": [
          {
            "value": 5
          }
        ],
        "expected": [
          {
            "value": 5
          }
        ],
        "tags": [
          "function",
          "variable",
          "defineVariable",
          "chain"
        ],
        "skip": {
          "interpreter": false,
          "compiler": false,
          "reason": "Complex variable chaining may need special handling"
        }
      },
      "suite": "Functions - defineVariable",
      "matched": false,
      "interpreterResult": {
        "success": true,
        "value": [
          {
            "value": 5
          }
        ],
        "time": 0.028708999999999207
      },
      "compilerResult": {
        "success": false,
        "error": "Function compile not implemented",
        "time": 0.021000000000000796
      }
    },
    {
      "test": {
        "name": "where - simple filter",
        "expression": "where($this > 2)",
        "input": [
          1,
          2,
          3,
          4,
          5
        ],
        "expected": [
          3,
          4,
          5
        ],
        "tags": [
          "function",
          "where",
          "filter"
        ]
      },
      "suite": "Functions - where",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [
          3,
          4,
          5
        ],
        "time": 0.016666000000000736
      },
      "compilerResult": {
        "success": true,
        "value": [
          3,
          4,
          5
        ],
        "time": 0.018458000000002528
      }
    },
    {
      "test": {
        "name": "where - filter by property",
        "expression": "where(age > 30)",
        "input": [
          {
            "name": "John",
            "age": 30
          },
          {
            "name": "Jane",
            "age": 25
          },
          {
            "name": "Bob",
            "age": 35
          }
        ],
        "expected": [
          {
            "name": "Bob",
            "age": 35
          }
        ],
        "tags": [
          "function",
          "where",
          "filter",
          "property"
        ]
      },
      "suite": "Functions - where",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [
          {
            "name": "Bob",
            "age": 35
          }
        ],
        "time": 0.010666999999997984
      },
      "compilerResult": {
        "success": true,
        "value": [
          {
            "name": "Bob",
            "age": 35
          }
        ],
        "time": 0.01099999999999568
      }
    },
    {
      "test": {
        "name": "where - empty input",
        "expression": "{}.where($this > 0)",
        "input": [],
        "expected": [],
        "tags": [
          "function",
          "where",
          "empty"
        ]
      },
      "suite": "Functions - where",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [],
        "time": 0.012167000000005146
      },
      "compilerResult": {
        "success": true,
        "value": [],
        "time": 0.010584000000001481
      }
    },
    {
      "test": {
        "name": "where - no matches",
        "expression": "where($this > 10)",
        "input": [
          1,
          2,
          3
        ],
        "expected": [],
        "tags": [
          "function",
          "where",
          "filter",
          "empty"
        ]
      },
      "suite": "Functions - where",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [],
        "time": 0.010957999999995138
      },
      "compilerResult": {
        "success": true,
        "value": [],
        "time": 0.009749999999996817
      }
    },
    {
      "test": {
        "name": "where - complex predicate without parentheses",
        "expression": "items.where(price > 12 and price < 18)",
        "input": [
          {
            "items": [
              {
                "name": "A",
                "price": 10
              },
              {
                "name": "B",
                "price": 20
              },
              {
                "name": "C",
                "price": 15
              }
            ]
          }
        ],
        "expected": [
          {
            "name": "C",
            "price": 15
          }
        ],
        "tags": [
          "function",
          "where",
          "filter",
          "complex",
          "precedence"
        ]
      },
      "suite": "Functions - where",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [
          {
            "name": "C",
            "price": 15
          }
        ],
        "time": 0.02787500000000165
      },
      "compilerResult": {
        "success": true,
        "value": [
          {
            "name": "C",
            "price": 15
          }
        ],
        "time": 0.034041000000001986
      }
    },
    {
      "test": {
        "name": "where - complex predicate with parentheses",
        "expression": "items.where((price > 12) and (price < 18))",
        "input": [
          {
            "items": [
              {
                "name": "A",
                "price": 10
              },
              {
                "name": "B",
                "price": 20
              },
              {
                "name": "C",
                "price": 15
              }
            ]
          }
        ],
        "expected": [
          {
            "name": "C",
            "price": 15
          }
        ],
        "tags": [
          "function",
          "where",
          "filter",
          "complex"
        ]
      },
      "suite": "Functions - where",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [
          {
            "name": "C",
            "price": 15
          }
        ],
        "time": 0.03812500000000085
      },
      "compilerResult": {
        "success": true,
        "value": [
          {
            "name": "C",
            "price": 15
          }
        ],
        "time": 0.01958299999999724
      }
    },
    {
      "test": {
        "name": "where - with explicit $this",
        "expression": "$this.where($this > 2)",
        "input": [
          1,
          2,
          3,
          4,
          5
        ],
        "expected": [
          3,
          4,
          5
        ],
        "tags": [
          "function",
          "where",
          "filter",
          "$this"
        ]
      },
      "suite": "Functions - where",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [],
        "time": 0.014167000000000485
      },
      "compilerResult": {
        "success": true,
        "value": [],
        "time": 0.010207999999998663
      }
    },
    {
      "test": {
        "name": "where - using $index",
        "expression": "$this.where($index < 2)",
        "input": [
          "a",
          "b",
          "c",
          "d"
        ],
        "expected": [
          "a",
          "b"
        ],
        "tags": [
          "function",
          "where",
          "filter",
          "$index"
        ]
      },
      "suite": "Functions - where",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [],
        "time": 0.06425000000000125
      },
      "compilerResult": {
        "success": true,
        "value": [],
        "time": 0.022750000000002046
      }
    },
    {
      "test": {
        "name": "where - empty predicate",
        "expression": "$this.where({})",
        "input": [
          1,
          2,
          3
        ],
        "expected": [],
        "tags": [
          "function",
          "where",
          "filter",
          "empty",
          "predicate"
        ]
      },
      "suite": "Functions - where",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [],
        "time": 0.019874999999998977
      },
      "compilerResult": {
        "success": true,
        "value": [],
        "time": 0.009667000000000314
      }
    },
    {
      "test": {
        "name": "toString - number",
        "expression": "42.toString()",
        "input": [],
        "expected": [
          "42"
        ],
        "tags": [
          "function",
          "conversion",
          "toString"
        ]
      },
      "suite": "Functions - Conversion",
      "matched": false,
      "interpreterResult": {
        "success": true,
        "value": [
          "42"
        ],
        "time": 0.03620899999999949
      },
      "compilerResult": {
        "success": false,
        "error": "Function compile not implemented",
        "time": 0.008333999999997843
      }
    },
    {
      "test": {
        "name": "toString - boolean true",
        "expression": "true.toString()",
        "input": [],
        "expected": [
          "true"
        ],
        "tags": [
          "function",
          "conversion",
          "toString"
        ]
      },
      "suite": "Functions - Conversion",
      "matched": false,
      "interpreterResult": {
        "success": true,
        "value": [
          "true"
        ],
        "time": 0.007874999999998522
      },
      "compilerResult": {
        "success": false,
        "error": "Function compile not implemented",
        "time": 0.006915999999996814
      }
    },
    {
      "test": {
        "name": "toString - boolean false",
        "expression": "false.toString()",
        "input": [],
        "expected": [
          "false"
        ],
        "tags": [
          "function",
          "conversion",
          "toString"
        ]
      },
      "suite": "Functions - Conversion",
      "matched": false,
      "interpreterResult": {
        "success": true,
        "value": [
          "false"
        ],
        "time": 0.006957999999997355
      },
      "compilerResult": {
        "success": false,
        "error": "Function compile not implemented",
        "time": 0.004750000000001364
      }
    },
    {
      "test": {
        "name": "toString - string",
        "expression": "'hello'.toString()",
        "input": [],
        "expected": [
          "hello"
        ],
        "tags": [
          "function",
          "conversion",
          "toString"
        ]
      },
      "suite": "Functions - Conversion",
      "matched": false,
      "interpreterResult": {
        "success": true,
        "value": [
          "hello"
        ],
        "time": 0.07816700000000054
      },
      "compilerResult": {
        "success": false,
        "error": "Function compile not implemented",
        "time": 0.03720899999999716
      }
    },
    {
      "test": {
        "name": "toInteger - string",
        "expression": "'42'.toInteger()",
        "input": [],
        "expected": [
          42
        ],
        "tags": [
          "function",
          "conversion",
          "toInteger"
        ]
      },
      "suite": "Functions - Conversion",
      "matched": false,
      "interpreterResult": {
        "success": true,
        "value": [
          42
        ],
        "time": 0.05070899999999767
      },
      "compilerResult": {
        "success": false,
        "error": "Function compile not implemented",
        "time": 0.017125000000000057
      }
    },
    {
      "test": {
        "name": "toInteger - decimal",
        "expression": "3.14.toInteger()",
        "input": [],
        "expected": [
          3
        ],
        "tags": [
          "function",
          "conversion",
          "toInteger"
        ]
      },
      "suite": "Functions - Conversion",
      "matched": false,
      "interpreterResult": {
        "success": true,
        "value": [
          3
        ],
        "time": 0.009000000000000341
      },
      "compilerResult": {
        "success": false,
        "error": "Function compile not implemented",
        "time": 0.007415999999999201
      }
    },
    {
      "test": {
        "name": "toInteger - boolean true",
        "expression": "true.toInteger()",
        "input": [],
        "expected": [
          1
        ],
        "tags": [
          "function",
          "conversion",
          "toInteger"
        ]
      },
      "suite": "Functions - Conversion",
      "matched": false,
      "interpreterResult": {
        "success": true,
        "value": [
          1
        ],
        "time": 0.005624999999994884
      },
      "compilerResult": {
        "success": false,
        "error": "Function compile not implemented",
        "time": 0.006875000000000853
      }
    },
    {
      "test": {
        "name": "toInteger - boolean false",
        "expression": "false.toInteger()",
        "input": [],
        "expected": [
          0
        ],
        "tags": [
          "function",
          "conversion",
          "toInteger"
        ]
      },
      "suite": "Functions - Conversion",
      "matched": false,
      "interpreterResult": {
        "success": true,
        "value": [
          0
        ],
        "time": 0.005166999999993038
      },
      "compilerResult": {
        "success": false,
        "error": "Function compile not implemented",
        "time": 0.006416999999999007
      }
    },
    {
      "test": {
        "name": "toInteger - invalid string",
        "expression": "'hello'.toInteger()",
        "input": [],
        "expected": [],
        "tags": [
          "function",
          "conversion",
          "toInteger",
          "invalid"
        ]
      },
      "suite": "Functions - Conversion",
      "matched": false,
      "interpreterResult": {
        "success": true,
        "value": [],
        "time": 0.017417000000001792
      },
      "compilerResult": {
        "success": false,
        "error": "Function compile not implemented",
        "time": 0.009875000000000966
      }
    },
    {
      "test": {
        "name": "toDecimal - string",
        "expression": "'3.14'.toDecimal()",
        "input": [],
        "expected": [
          3.14
        ],
        "tags": [
          "function",
          "conversion",
          "toDecimal"
        ]
      },
      "suite": "Functions - Conversion",
      "matched": false,
      "interpreterResult": {
        "success": true,
        "value": [
          3.14
        ],
        "time": 0.0708749999999938
      },
      "compilerResult": {
        "success": false,
        "error": "Function compile not implemented",
        "time": 0.00824999999999676
      }
    },
    {
      "test": {
        "name": "toDecimal - integer",
        "expression": "42.toDecimal()",
        "input": [],
        "expected": [
          42
        ],
        "tags": [
          "function",
          "conversion",
          "toDecimal"
        ]
      },
      "suite": "Functions - Conversion",
      "matched": false,
      "interpreterResult": {
        "success": true,
        "value": [
          42
        ],
        "time": 0.00841599999999687
      },
      "compilerResult": {
        "success": false,
        "error": "Function compile not implemented",
        "time": 0.013125000000002274
      }
    },
    {
      "test": {
        "name": "toDecimal - boolean true",
        "expression": "true.toDecimal()",
        "input": [],
        "expected": [
          1
        ],
        "tags": [
          "function",
          "conversion",
          "toDecimal"
        ]
      },
      "suite": "Functions - Conversion",
      "matched": false,
      "interpreterResult": {
        "success": true,
        "value": [
          1
        ],
        "time": 0.007207999999998549
      },
      "compilerResult": {
        "success": false,
        "error": "Function compile not implemented",
        "time": 0.009208999999998468
      }
    },
    {
      "test": {
        "name": "toDecimal - boolean false",
        "expression": "false.toDecimal()",
        "input": [],
        "expected": [
          0
        ],
        "tags": [
          "function",
          "conversion",
          "toDecimal"
        ]
      },
      "suite": "Functions - Conversion",
      "matched": false,
      "interpreterResult": {
        "success": true,
        "value": [
          0
        ],
        "time": 0.008874999999996191
      },
      "compilerResult": {
        "success": false,
        "error": "Function compile not implemented",
        "time": 0.01666699999999821
      }
    },
    {
      "test": {
        "name": "toBoolean - string true",
        "expression": "'true'.toBoolean()",
        "input": [],
        "expected": [
          true
        ],
        "tags": [
          "function",
          "conversion",
          "toBoolean"
        ]
      },
      "suite": "Functions - Conversion",
      "matched": false,
      "interpreterResult": {
        "success": true,
        "value": [
          true
        ],
        "time": 0.041957999999993945
      },
      "compilerResult": {
        "success": false,
        "error": "Function compile not implemented",
        "time": 0.034458000000000766
      }
    },
    {
      "test": {
        "name": "toBoolean - string false",
        "expression": "'false'.toBoolean()",
        "input": [],
        "expected": [
          false
        ],
        "tags": [
          "function",
          "conversion",
          "toBoolean"
        ]
      },
      "suite": "Functions - Conversion",
      "matched": false,
      "interpreterResult": {
        "success": true,
        "value": [
          false
        ],
        "time": 0.00954200000000327
      },
      "compilerResult": {
        "success": false,
        "error": "Function compile not implemented",
        "time": 0.03187499999999943
      }
    },
    {
      "test": {
        "name": "toBoolean - number 1",
        "expression": "1.toBoolean()",
        "input": [],
        "expected": [
          true
        ],
        "tags": [
          "function",
          "conversion",
          "toBoolean"
        ]
      },
      "suite": "Functions - Conversion",
      "matched": false,
      "interpreterResult": {
        "success": true,
        "value": [
          true
        ],
        "time": 0.0062080000000008795
      },
      "compilerResult": {
        "success": false,
        "error": "Function compile not implemented",
        "time": 0.004457999999999629
      }
    },
    {
      "test": {
        "name": "toBoolean - number 0",
        "expression": "0.toBoolean()",
        "input": [],
        "expected": [
          false
        ],
        "tags": [
          "function",
          "conversion",
          "toBoolean"
        ]
      },
      "suite": "Functions - Conversion",
      "matched": false,
      "interpreterResult": {
        "success": true,
        "value": [
          false
        ],
        "time": 0.007874999999998522
      },
      "compilerResult": {
        "success": false,
        "error": "Function compile not implemented",
        "time": 0.011167000000000371
      }
    },
    {
      "test": {
        "name": "toBoolean - invalid string",
        "expression": "'maybe'.toBoolean()",
        "input": [],
        "expected": [],
        "tags": [
          "function",
          "conversion",
          "toBoolean",
          "invalid"
        ]
      },
      "suite": "Functions - Conversion",
      "matched": false,
      "interpreterResult": {
        "success": true,
        "value": [],
        "time": 0.00883299999999565
      },
      "compilerResult": {
        "success": false,
        "error": "Function compile not implemented",
        "time": 0.008665999999998064
      }
    },
    {
      "test": {
        "name": "first - single item",
        "expression": "values.first()",
        "input": [
          {
            "values": [
              1,
              2,
              3
            ]
          }
        ],
        "expected": [
          1
        ],
        "tags": [
          "function",
          "subsetting",
          "first"
        ]
      },
      "suite": "Functions - Subsetting",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [
          1
        ],
        "time": 0.01241700000000634
      },
      "compilerResult": {
        "success": true,
        "value": [
          1
        ],
        "time": 0.01637500000000358
      }
    },
    {
      "test": {
        "name": "first - empty",
        "expression": "{}.first()",
        "input": [],
        "expected": [],
        "tags": [
          "function",
          "subsetting",
          "first",
          "empty"
        ]
      },
      "suite": "Functions - Subsetting",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [],
        "time": 0.007667000000004975
      },
      "compilerResult": {
        "success": true,
        "value": [],
        "time": 0.006709000000000742
      }
    },
    {
      "test": {
        "name": "last - multiple items",
        "expression": "values.last()",
        "input": [
          {
            "values": [
              1,
              2,
              3
            ]
          }
        ],
        "expected": [
          3
        ],
        "tags": [
          "function",
          "subsetting",
          "last"
        ]
      },
      "suite": "Functions - Subsetting",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [
          3
        ],
        "time": 0.03612499999999841
      },
      "compilerResult": {
        "success": true,
        "value": [
          3
        ],
        "time": 0.0777919999999952
      }
    },
    {
      "test": {
        "name": "last - empty",
        "expression": "{}.last()",
        "input": [],
        "expected": [],
        "tags": [
          "function",
          "subsetting",
          "last",
          "empty"
        ]
      },
      "suite": "Functions - Subsetting",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [],
        "time": 0.0105829999999969
      },
      "compilerResult": {
        "success": true,
        "value": [],
        "time": 0.006333000000005029
      }
    },
    {
      "test": {
        "name": "tail - multiple items",
        "expression": "values.tail()",
        "input": [
          {
            "values": [
              1,
              2,
              3,
              4
            ]
          }
        ],
        "expected": [
          2,
          3,
          4
        ],
        "tags": [
          "function",
          "subsetting",
          "tail"
        ]
      },
      "suite": "Functions - Subsetting",
      "matched": false,
      "interpreterResult": {
        "success": true,
        "value": [
          2,
          3,
          4
        ],
        "time": 0.02016599999999613
      },
      "compilerResult": {
        "success": false,
        "error": "Function compile not implemented",
        "time": 0.011541999999998609
      }
    },
    {
      "test": {
        "name": "tail - single item",
        "expression": "values.tail()",
        "input": [
          {
            "values": [
              1
            ]
          }
        ],
        "expected": [],
        "tags": [
          "function",
          "subsetting",
          "tail"
        ]
      },
      "suite": "Functions - Subsetting",
      "matched": false,
      "interpreterResult": {
        "success": true,
        "value": [],
        "time": 0.0072499999999990905
      },
      "compilerResult": {
        "success": false,
        "error": "Function compile not implemented",
        "time": 0.009083000000003949
      }
    },
    {
      "test": {
        "name": "skip - 2 items",
        "expression": "values.skip(2)",
        "input": [
          {
            "values": [
              1,
              2,
              3,
              4,
              5
            ]
          }
        ],
        "expected": [
          3,
          4,
          5
        ],
        "tags": [
          "function",
          "subsetting",
          "skip"
        ]
      },
      "suite": "Functions - Subsetting",
      "matched": false,
      "interpreterResult": {
        "success": true,
        "value": [
          3,
          4,
          5
        ],
        "time": 0.022750000000002046
      },
      "compilerResult": {
        "success": false,
        "error": "Function compile not implemented",
        "time": 0.00841599999999687
      }
    },
    {
      "test": {
        "name": "skip - more than length",
        "expression": "values.skip(10)",
        "input": [
          {
            "values": [
              1,
              2,
              3
            ]
          }
        ],
        "expected": [],
        "tags": [
          "function",
          "subsetting",
          "skip"
        ]
      },
      "suite": "Functions - Subsetting",
      "matched": false,
      "interpreterResult": {
        "success": true,
        "value": [],
        "time": 0.009875000000000966
      },
      "compilerResult": {
        "success": false,
        "error": "Function compile not implemented",
        "time": 0.00695899999999483
      }
    },
    {
      "test": {
        "name": "take - 3 items",
        "expression": "values.take(3)",
        "input": [
          {
            "values": [
              1,
              2,
              3,
              4,
              5
            ]
          }
        ],
        "expected": [
          1,
          2,
          3
        ],
        "tags": [
          "function",
          "subsetting",
          "take"
        ]
      },
      "suite": "Functions - Subsetting",
      "matched": false,
      "interpreterResult": {
        "success": true,
        "value": [
          1,
          2,
          3
        ],
        "time": 0.016708999999998753
      },
      "compilerResult": {
        "success": false,
        "error": "Function compile not implemented",
        "time": 0.010832999999998094
      }
    },
    {
      "test": {
        "name": "take - more than length",
        "expression": "values.take(10)",
        "input": [
          {
            "values": [
              1,
              2,
              3
            ]
          }
        ],
        "expected": [
          1,
          2,
          3
        ],
        "tags": [
          "function",
          "subsetting",
          "take"
        ]
      },
      "suite": "Functions - Subsetting",
      "matched": false,
      "interpreterResult": {
        "success": true,
        "value": [
          1,
          2,
          3
        ],
        "time": 0.012667000000000428
      },
      "compilerResult": {
        "success": false,
        "error": "Function compile not implemented",
        "time": 0.00854100000000102
      }
    },
    {
      "test": {
        "name": "single - one item",
        "expression": "value.single()",
        "input": [
          {
            "value": [
              42
            ]
          }
        ],
        "expected": [
          42
        ],
        "tags": [
          "function",
          "subsetting",
          "single"
        ]
      },
      "suite": "Functions - Subsetting",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [
          42
        ],
        "time": 0.02058399999999949
      },
      "compilerResult": {
        "success": true,
        "value": [
          42
        ],
        "time": 0.02966599999999886
      }
    },
    {
      "test": {
        "name": "single - empty",
        "expression": "{}.single()",
        "input": [],
        "expected": [],
        "tags": [
          "function",
          "subsetting",
          "single",
          "empty"
        ]
      },
      "suite": "Functions - Subsetting",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [],
        "time": 0.0049999999999954525
      },
      "compilerResult": {
        "success": true,
        "value": [],
        "time": 0.004792000000001906
      }
    },
    {
      "test": {
        "name": "single - multiple items error",
        "expression": "values.single()",
        "input": [
          {
            "values": [
              1,
              2
            ]
          }
        ],
        "expectedError": "single() requires collection to have exactly one item",
        "tags": [
          "function",
          "subsetting",
          "single",
          "error"
        ],
        "skip": {
          "interpreter": false,
          "compiler": false,
          "reason": "Test expects error to be thrown"
        }
      },
      "suite": "Functions - Subsetting",
      "matched": false,
      "interpreterResult": {
        "success": false,
        "error": "single() requires exactly one element",
        "time": 0.03575000000000017
      },
      "compilerResult": {
        "success": false,
        "error": "single() requires exactly one element",
        "time": 0.015875000000001194
      }
    },
    {
      "test": {
        "name": "select - property extraction",
        "expression": "select(name)",
        "input": [
          {
            "name": "John",
            "age": 30
          },
          {
            "name": "Jane",
            "age": 25
          }
        ],
        "expected": [
          "John",
          "Jane"
        ],
        "tags": [
          "function",
          "select",
          "transform"
        ]
      },
      "suite": "Functions - select",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [
          "John",
          "Jane"
        ],
        "time": 0.03174999999999528
      },
      "compilerResult": {
        "success": true,
        "value": [
          "John",
          "Jane"
        ],
        "time": 0.04725000000000534
      }
    },
    {
      "test": {
        "name": "select - expression",
        "expression": "select($this * 2)",
        "input": [
          1,
          2,
          3
        ],
        "expected": [
          2,
          4,
          6
        ],
        "tags": [
          "function",
          "select",
          "transform",
          "expression"
        ]
      },
      "suite": "Functions - select",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [
          2,
          4,
          6
        ],
        "time": 0.01779200000000003
      },
      "compilerResult": {
        "success": true,
        "value": [
          2,
          4,
          6
        ],
        "time": 0.03608399999999534
      }
    },
    {
      "test": {
        "name": "select - flattening",
        "expression": "select(names)",
        "input": [
          {
            "names": [
              "John",
              "J"
            ]
          },
          {
            "names": [
              "Jane"
            ]
          }
        ],
        "expected": [
          "John",
          "J",
          "Jane"
        ],
        "tags": [
          "function",
          "select",
          "transform",
          "flatten"
        ]
      },
      "suite": "Functions - select",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [
          "John",
          "J",
          "Jane"
        ],
        "time": 0.007334000000000174
      },
      "compilerResult": {
        "success": true,
        "value": [
          "John",
          "J",
          "Jane"
        ],
        "time": 0.008499999999997954
      }
    },
    {
      "test": {
        "name": "select - empty input",
        "expression": "{}.select(name)",
        "input": [],
        "expected": [],
        "tags": [
          "function",
          "select",
          "empty"
        ]
      },
      "suite": "Functions - select",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [],
        "time": 0.024667000000000883
      },
      "compilerResult": {
        "success": true,
        "value": [],
        "time": 0.0206670000000031
      }
    },
    {
      "test": {
        "name": "select - complex expression",
        "expression": "select(first & ' ' & last)",
        "input": [
          {
            "first": "John",
            "last": "Doe"
          },
          {
            "first": "Jane",
            "last": "Smith"
          }
        ],
        "expected": [
          "John Doe",
          "Jane Smith"
        ],
        "tags": [
          "function",
          "select",
          "transform",
          "complex"
        ]
      },
      "suite": "Functions - select",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [
          "John Doe",
          "Jane Smith"
        ],
        "time": 0.027665999999996416
      },
      "compilerResult": {
        "success": true,
        "value": [
          "John Doe",
          "Jane Smith"
        ],
        "time": 0.027999999999998693
      }
    },
    {
      "test": {
        "name": "select - with explicit $this",
        "expression": "$this.select(name)",
        "input": [
          {
            "name": "John",
            "age": 30
          },
          {
            "name": "Jane",
            "age": 25
          }
        ],
        "expected": [
          "John",
          "Jane"
        ],
        "tags": [
          "function",
          "select",
          "transform",
          "$this"
        ]
      },
      "suite": "Functions - select",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [],
        "time": 0.0089579999999998
      },
      "compilerResult": {
        "success": true,
        "value": [],
        "time": 0.009208000000000993
      }
    },
    {
      "test": {
        "name": "select - using $index",
        "expression": "$this.select($index)",
        "input": [
          "a",
          "b",
          "c"
        ],
        "expected": [
          0,
          1,
          2
        ],
        "tags": [
          "function",
          "select",
          "transform",
          "$index"
        ]
      },
      "suite": "Functions - select",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [],
        "time": 0.03174999999999528
      },
      "compilerResult": {
        "success": true,
        "value": [],
        "time": 0.018458000000002528
      }
    },
    {
      "test": {
        "name": "number literal - integer",
        "expression": "42",
        "input": [],
        "expected": [
          42
        ],
        "tags": [
          "basic",
          "literal",
          "number"
        ]
      },
      "suite": "Literals",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [
          42
        ],
        "time": 0.005666000000005056
      },
      "compilerResult": {
        "success": true,
        "value": [
          42
        ],
        "time": 0.0030830000000037217
      }
    },
    {
      "test": {
        "name": "number literal - decimal",
        "expression": "3.14",
        "input": [],
        "expected": [
          3.14
        ],
        "tags": [
          "basic",
          "literal",
          "number"
        ]
      },
      "suite": "Literals",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [
          3.14
        ],
        "time": 0.002040999999998405
      },
      "compilerResult": {
        "success": true,
        "value": [
          3.14
        ],
        "time": 0.002207999999995991
      }
    },
    {
      "test": {
        "name": "number literal - negative",
        "expression": "-17",
        "input": [],
        "expected": [
          -17
        ],
        "tags": [
          "basic",
          "literal",
          "number"
        ]
      },
      "suite": "Literals",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [
          -17
        ],
        "time": 0.005834000000000117
      },
      "compilerResult": {
        "success": true,
        "value": [
          -17
        ],
        "time": 0.004458999999997104
      }
    },
    {
      "test": {
        "name": "string literal - simple",
        "expression": "'hello'",
        "input": [],
        "expected": [
          "hello"
        ],
        "tags": [
          "basic",
          "literal",
          "string"
        ]
      },
      "suite": "Literals",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [
          "hello"
        ],
        "time": 0.002541999999998268
      },
      "compilerResult": {
        "success": true,
        "value": [
          "hello"
        ],
        "time": 0.0021249999999994884
      }
    },
    {
      "test": {
        "name": "string literal - empty",
        "expression": "''",
        "input": [],
        "expected": [
          ""
        ],
        "tags": [
          "basic",
          "literal",
          "string"
        ]
      },
      "suite": "Literals",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [
          ""
        ],
        "time": 0.0009999999999976694
      },
      "compilerResult": {
        "success": true,
        "value": [
          ""
        ],
        "time": 0.001125000000001819
      }
    },
    {
      "test": {
        "name": "boolean literal - true",
        "expression": "true",
        "input": [],
        "expected": [
          true
        ],
        "tags": [
          "basic",
          "literal",
          "boolean"
        ]
      },
      "suite": "Literals",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [
          true
        ],
        "time": 0.002083999999996422
      },
      "compilerResult": {
        "success": true,
        "value": [
          true
        ],
        "time": 0.0010839999999987526
      }
    },
    {
      "test": {
        "name": "boolean literal - false",
        "expression": "false",
        "input": [],
        "expected": [
          false
        ],
        "tags": [
          "basic",
          "literal",
          "boolean"
        ]
      },
      "suite": "Literals",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [
          false
        ],
        "time": 0.0014170000000035543
      },
      "compilerResult": {
        "success": true,
        "value": [
          false
        ],
        "time": 0.0050829999999990605
      }
    },
    {
      "test": {
        "name": "null literal as empty collection",
        "expression": "null",
        "input": [],
        "expected": [],
        "tags": [
          "basic",
          "literal",
          "null"
        ]
      },
      "suite": "Literals",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [],
        "time": 0.004666999999997756
      },
      "compilerResult": {
        "success": true,
        "value": [],
        "time": 0.0024999999999977263
      }
    },
    {
      "test": {
        "name": "empty collection literal",
        "expression": "{}",
        "input": [],
        "expected": [],
        "tags": [
          "basic",
          "literal",
          "collection"
        ]
      },
      "suite": "Literals",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [],
        "time": 0.0023749999999935767
      },
      "compilerResult": {
        "success": true,
        "value": [],
        "time": 0.0030420000000006553
      }
    },
    {
      "test": {
        "name": "collection literal - numbers",
        "expression": "{1, 2, 3}",
        "input": [],
        "expected": [
          1,
          2,
          3
        ],
        "tags": [
          "basic",
          "literal",
          "collection"
        ]
      },
      "suite": "Literals",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [
          1,
          2,
          3
        ],
        "time": 0.009790999999999883
      },
      "compilerResult": {
        "success": true,
        "value": [
          1,
          2,
          3
        ],
        "time": 0.0870829999999998
      }
    },
    {
      "test": {
        "name": "collection literal - strings",
        "expression": "{'a', 'b', 'c'}",
        "input": [],
        "expected": [
          "a",
          "b",
          "c"
        ],
        "tags": [
          "basic",
          "literal",
          "collection"
        ]
      },
      "suite": "Literals",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [
          "a",
          "b",
          "c"
        ],
        "time": 0.005957999999999686
      },
      "compilerResult": {
        "success": true,
        "value": [
          "a",
          "b",
          "c"
        ],
        "time": 0.006833000000000311
      }
    },
    {
      "test": {
        "name": "collection literal - booleans",
        "expression": "{true, false, true}",
        "input": [],
        "expected": [
          true,
          false,
          true
        ],
        "tags": [
          "basic",
          "literal",
          "collection"
        ]
      },
      "suite": "Literals",
      "matched": true,
      "interpreterResult": {
        "success": true,
        "value": [
          true,
          false,
          true
        ],
        "time": 0.004333000000002585
      },
      "compilerResult": {
        "success": true,
        "value": [
          true,
          false,
          true
        ],
        "time": 0.0038330000000001974
      }
    }
  ]
}