{
  "name": "Contextual Error Messages",
  "description": "Test cases to verify context-aware error messages",
  "version": "1.0.0",
  "tests": [
    {
      "name": "error in function call context",
      "expression": "Patient.where(])",
      "tags": ["error", "context", "function"],
      "modes": ["diagnostic"],
      "expected": {
        "error": true,
        "diagnostics": [{
          "code": "UNEXPECTED_TOKEN",
          "severity": "error",
          "messageContains": ["function call", "Expected expression"]
        }]
      }
    },
    {
      "name": "error in index expression context",
      "expression": "Patient.name[..]",
      "tags": ["error", "context", "index"],
      "modes": ["diagnostic"],
      "expected": {
        "error": true,
        "diagnostics": [{
          "code": "UNEXPECTED_TOKEN",
          "severity": "error",
          "messageContains": ["index expression", "Expected expression"]
        }]
      }
    },
    {
      "name": "error in binary expression context",
      "expression": "5 + + 3",
      "tags": ["error", "context", "binary"],
      "modes": ["diagnostic"],
      "expected": {
        "error": true,
        "diagnostics": [{
          "code": "UNEXPECTED_TOKEN",
          "severity": "error",
          "messageContains": ["Expected expression", "found '+'"]
        }]
      }
    },
    {
      "name": "error in collection literal context",
      "expression": "{1, , 3}",
      "tags": ["error", "context", "collection"],
      "modes": ["diagnostic"],
      "expected": {
        "error": true,
        "diagnostics": [{
          "code": "EXPECTED_EXPRESSION",
          "severity": "error",
          "messageContains": ["collection", "Expected expression"]
        }]
      }
    },
    {
      "name": "error in type cast context",
      "expression": "Patient as 123",
      "tags": ["error", "context", "type"],
      "modes": ["diagnostic"],
      "expected": {
        "error": true,
        "diagnostics": [{
          "code": "EXPECTED_IDENTIFIER",
          "severity": "error",
          "messageContains": ["Expected type name", "found number"]
        }]
      }
    },
    {
      "name": "helpful message for common mistakes",
      "expression": "Patient.name.where(use == 'official')",
      "tags": ["error", "context", "helpful"],
      "modes": ["diagnostic"],
      "expected": {
        "error": true,
        "diagnostics": [{
          "code": "INVALID_OPERATOR",
          "severity": "error",
          "messageContains": ["'==' is not valid", "use '=' for equality"]
        }]
      }
    },
    {
      "name": "context in nested expressions",
      "expression": "Patient.where(name.where(])",
      "tags": ["error", "context", "nested"],
      "modes": ["diagnostic"],
      "expected": {
        "error": true,
        "diagnostics": [{
          "code": "UNEXPECTED_TOKEN",
          "severity": "error",
          "messageContains": ["function call"]
        }]
      }
    },
    {
      "name": "descriptive token names",
      "expression": "Patient.123",
      "tags": ["error", "context", "description"],
      "modes": ["diagnostic"],
      "expected": {
        "error": true,
        "diagnostics": [{
          "code": "EXPECTED_IDENTIFIER",
          "severity": "error",
          "messageContains": ["Expected an identifier", "found number"]
        }]
      }
    },
    {
      "name": "error with related information",
      "expression": "Patient.exists",
      "tags": ["error", "context", "related"],
      "modes": ["diagnostic"],
      "expected": {
        "error": true,
        "diagnostics": [{
          "code": "MISSING_ARGUMENTS",
          "severity": "error",
          "message": "Function 'exists' requires parentheses",
          "hasRelatedInfo": true
        }]
      }
    },
    {
      "name": "suggestion for missing quotes",
      "expression": "Patient.name = John",
      "tags": ["error", "context", "suggestion"],
      "modes": ["diagnostic"],
      "expected": {
        "error": true,
        "diagnostics": [{
          "code": "UNEXPECTED_TOKEN",
          "severity": "error",
          "messageContains": ["Did you mean 'John'?"]
        }]
      }
    }
  ]
}