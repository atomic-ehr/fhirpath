{
  "name": "Multiple Parser Errors",
  "description": "Test cases with multiple errors to verify error recovery",
  "version": "1.0.0",
  "tests": [
    {
      "name": "double dot and unclosed parenthesis",
      "expression": "Patient..where(name = 'John'",
      "tags": [
        "error",
        "multiple",
        "recovery"
      ],
      "expected": {
        "error": true,
        "diagnosticCount": 2,
        "diagnostics": [
          {
            "code": "INVALID_OPERATOR",
            "severity": "error",
            "message": "Invalid '..' operator"
          },
          {
            "code": "UNCLOSED_PARENTHESIS",
            "severity": "error",
            "message": "Unclosed parenthesis"
          }
        ]
      },
      "parserOnly": true
    },
    {
      "name": "multiple unclosed delimiters",
      "expression": "Patient.where(name[0 = 'J'",
      "tags": [
        "error",
        "multiple",
        "recovery",
        "unclosed"
      ],
      "expected": {
        "error": true,
        "diagnosticCount": 2,
        "diagnostics": [
          {
            "code": "UNCLOSED_BRACKET",
            "severity": "error"
          },
          {
            "code": "UNCLOSED_PARENTHESIS",
            "severity": "error"
          }
        ]
      },
      "parserOnly": true
    },
    {
      "name": "invalid operators and missing operands",
      "expression": "5 ++ 3 -- 2",
      "tags": [
        "error",
        "multiple",
        "operator"
      ],
      "expected": {
        "error": true,
        "diagnosticCount": 2,
        "diagnostics": [
          {
            "code": "INVALID_OPERATOR",
            "severity": "error",
            "message": "Invalid '++' operator"
          },
          {
            "code": "INVALID_OPERATOR",
            "severity": "error",
            "message": "Invalid '--' operator"
          }
        ]
      },
      "parserOnly": true
    },
    {
      "name": "multiple syntax errors in complex expression",
      "expression": "Patient..name.where(.given[0.substring(0, 1) = 'J')",
      "tags": [
        "error",
        "multiple",
        "complex"
      ],
      "expected": {
        "error": true,
        "diagnosticCount": 3,
        "minDiagnostics": 3
      },
      "parserOnly": true
    },
    {
      "name": "chained errors",
      "expression": "Patient.[0]..name.()",
      "tags": [
        "error",
        "multiple",
        "chain"
      ],
      "expected": {
        "error": true,
        "diagnosticCount": 3
      },
      "parserOnly": true
    },
    {
      "name": "nested unclosed delimiters",
      "expression": "{{1, 2, [3, 4}",
      "tags": [
        "error",
        "multiple",
        "nested",
        "unclosed"
      ],
      "expected": {
        "error": true,
        "minDiagnostics": 2
      },
      "parserOnly": true
    },
    {
      "name": "mixed bracket and parenthesis errors",
      "expression": "Patient.name[(0].where(use = 'official')",
      "tags": [
        "error",
        "multiple",
        "mixed"
      ],
      "expected": {
        "error": true,
        "diagnosticCount": 2
      },
      "parserOnly": true
    },
    {
      "name": "sequential missing operands",
      "expression": "a + + b * * c",
      "tags": [
        "error",
        "multiple",
        "operator"
      ],
      "expected": {
        "error": true,
        "minDiagnostics": 2
      },
      "parserOnly": true
    },
    {
      "name": "incomplete expressions with errors",
      "expression": "Patient.name. + .given",
      "tags": [
        "error",
        "multiple",
        "incomplete"
      ],
      "expected": {
        "error": true,
        "minDiagnostics": 2
      },
      "parserOnly": true
    },
    {
      "name": "collection with multiple issues",
      "expression": "{1,, 3.. 5}",
      "tags": [
        "error",
        "multiple",
        "collection"
      ],
      "expected": {
        "error": true,
        "minDiagnostics": 2
      },
      "parserOnly": true
    }
  ]
}