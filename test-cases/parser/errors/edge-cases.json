{
  "name": "Parser Error Edge Cases",
  "description": "Edge cases and boundary conditions for parser error handling",
  "version": "1.0.0",
  "tests": [
    {
      "name": "empty expression",
      "expression": "",
      "tags": [
        "error",
        "edge",
        "empty"
      ],
      "expected": {
        "error": true,
        "diagnostics": [
          {
            "code": "EXPECTED_EXPRESSION",
            "severity": "error",
            "message": "Expected expression"
          }
        ]
      },
      "parserOnly": true,
      "pending": "Duplicate diagnostics issue - parser reports error twice"
    },
    {
      "name": "only whitespace",
      "expression": "   \n\t  ",
      "tags": [
        "error",
        "edge",
        "whitespace"
      ],
      "expected": {
        "error": true,
        "diagnostics": [
          {
            "code": "EXPECTED_EXPRESSION",
            "severity": "error"
          }
        ]
      },
      "parserOnly": true,
      "pending": "Duplicate diagnostics issue - parser reports error twice"
    },
    {
      "name": "single operator",
      "expression": "+",
      "tags": [
        "error",
        "edge",
        "operator"
      ],
      "expected": {
        "error": true,
        "diagnostics": [
          {
            "code": "EXPECTED_EXPRESSION",
            "severity": "error",
            "message": "Expected expression before '+'"
          }
        ]
      },
      "parserOnly": true,
      "pending": "Error message context not implemented - expects \"Expected expression before '+'\""
    },
    {
      "name": "single dot",
      "expression": ".",
      "tags": [
        "error",
        "edge",
        "operator"
      ],
      "expected": {
        "error": true,
        "diagnostics": [
          {
            "code": "EXPECTED_EXPRESSION",
            "severity": "error"
          }
        ]
      },
      "parserOnly": true,
      "pending": "Single dot specific error handling not implemented"
    },
    {
      "name": "only opening parenthesis",
      "expression": "(",
      "tags": [
        "error",
        "edge",
        "delimiter"
      ],
      "expected": {
        "error": true,
        "diagnostics": [
          {
            "code": "EXPECTED_EXPRESSION",
            "severity": "error"
          },
          {
            "code": "UNCLOSED_PARENTHESIS",
            "severity": "error"
          }
        ]
      },
      "parserOnly": true,
      "pending": "Multiple diagnostic reporting for unclosed delimiters needs work"
    },
    {
      "name": "only closing parenthesis",
      "expression": ")",
      "tags": [
        "error",
        "edge",
        "delimiter"
      ],
      "expected": {
        "error": true,
        "diagnostics": [
          {
            "code": "UNEXPECTED_TOKEN",
            "severity": "error",
            "message": "Unexpected ')'"
          }
        ]
      },
      "parserOnly": true,
      "pending": "Unexpected closing delimiter specific handling needed"
    },
    {
      "name": "deeply nested unclosed",
      "expression": "((((((a",
      "tags": [
        "error",
        "edge",
        "nested"
      ],
      "modes": [
        "diagnostic"
      ],
      "expected": {
        "error": true,
        "diagnosticCount": 6
      },
      "parserOnly": true,
      "pending": "Multiple unclosed delimiter tracking not fully implemented"
    },
    {
      "name": "alternating delimiters",
      "expression": "[({[({",
      "tags": [
        "error",
        "edge",
        "delimiter"
      ],
      "expected": {
        "error": true,
        "minDiagnostics": 3
      },
      "parserOnly": true,
      "pending": "Complex delimiter mismatch detection not implemented"
    },
    {
      "name": "maximum expression length",
      "expression": "Patient.name.given.family.suffix.prefix.text.value.system.code",
      "tags": [
        "edge",
        "valid",
        "long"
      ],
      "expected": {
        "error": false
      },
      "parserOnly": true
    },
    {
      "name": "unicode in errors",
      "expression": "Patient.ÂêçÂâç",
      "tags": [
        "edge",
        "unicode"
      ],
      "expected": {
        "error": false
      },
      "parserOnly": true
    },
    {
      "name": "emoji in identifier",
      "expression": "Patient.üòÄ",
      "tags": [
        "error",
        "edge",
        "emoji"
      ],
      "expected": {
        "error": true,
        "diagnostics": [
          {
            "code": "INVALID_CHARACTER",
            "severity": "error"
          }
        ]
      },
      "parserOnly": true,
      "pending": "Unicode emoji in identifiers not supported by lexer"
    },
    {
      "name": "null character",
      "expression": "Patient\u0000name",
      "tags": [
        "error",
        "edge",
        "null"
      ],
      "expected": {
        "error": true,
        "diagnostics": [
          {
            "code": "INVALID_CHARACTER",
            "severity": "error"
          }
        ]
      },
      "parserOnly": true,
      "pending": "Null character detection in lexer not implemented"
    },
    {
      "name": "very long identifier",
      "expression": "Patient.veryveryveryveryveryveryveryveryveryveryveryveryverylongidentifiername",
      "tags": [
        "edge",
        "valid",
        "long"
      ],
      "expected": {
        "error": false
      },
      "parserOnly": true
    },
    {
      "name": "mixed valid and invalid",
      "expression": "Patient.name + @ - Practitioner.name",
      "tags": [
        "error",
        "edge",
        "mixed"
      ],
      "modes": [
        "diagnostic"
      ],
      "expected": {
        "error": true,
        "hasPartialAst": true
      },
      "parserOnly": true
    },
    {
      "name": "error at end of long expression",
      "expression": "Patient.name.given.first().substring(0, 10).length().",
      "tags": [
        "error",
        "edge",
        "trailing"
      ],
      "expected": {
        "error": true,
        "diagnostics": [
          {
            "code": "EXPECTED_IDENTIFIER",
            "severity": "error"
          }
        ]
      },
      "parserOnly": true,
      "pending": "Trailing dot after method call error handling needs work"
    }
  ]
}