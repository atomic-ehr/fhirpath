{
  "name": "Parser Error Recovery",
  "description": "Test cases to verify parser continues after errors and produces partial AST",
  "version": "1.0.0",
  "tests": [
    {
      "name": "recovery after missing closing paren",
      "expression": "Patient.where(active = true.name",
      "tags": ["error", "recovery", "partial-ast"],
      "modes": ["diagnostic"],
      "expected": {
        "error": true,
        "hasPartialAst": true,
        "diagnostics": [{
          "code": "UNCLOSED_PARENTHESIS",
          "severity": "error"
        }],
        "astContains": ["where", "name"]
      }
    },
    {
      "name": "recovery at comma",
      "expression": "Patient.where(, name = 'John')",
      "tags": ["error", "recovery", "sync-point"],
      "modes": ["diagnostic"],
      "expected": {
        "error": true,
        "hasPartialAst": true,
        "diagnostics": [{
          "code": "EXPECTED_EXPRESSION",
          "severity": "error",
          "message": "Expected expression before ','"
        }]
      }
    },
    {
      "name": "recovery at pipe operator",
      "expression": "Patient..name | Practitioner.name",
      "tags": ["error", "recovery", "operator"],
      "modes": ["diagnostic"],
      "expected": {
        "error": true,
        "hasPartialAst": true,
        "diagnostics": [{
          "code": "INVALID_OPERATOR",
          "severity": "error"
        }],
        "astContains": ["Patient", "Practitioner"]
      }
    },
    {
      "name": "recovery in function arguments",
      "expression": "substring(0, , 5)",
      "tags": ["error", "recovery", "function"],
      "modes": ["diagnostic"],
      "expected": {
        "error": true,
        "hasPartialAst": true,
        "argumentCount": 2,
        "diagnostics": [{
          "code": "EXPECTED_EXPRESSION",
          "severity": "error"
        }]
      }
    },
    {
      "name": "recovery after invalid token in expression",
      "expression": "Patient.name @ and Patient.gender = 'male'",
      "tags": ["error", "recovery", "and-operator"],
      "modes": ["diagnostic"],
      "expected": {
        "error": true,
        "hasPartialAst": true,
        "diagnostics": [{
          "code": "INVALID_CHARACTER",
          "severity": "error"
        }],
        "astContains": ["and", "gender"]
      }
    },
    {
      "name": "recovery in nested structures",
      "expression": "Patient.name.where(given[0.substring(0, 1) = 'J')",
      "tags": ["error", "recovery", "nested"],
      "modes": ["diagnostic"],
      "expected": {
        "error": true,
        "hasPartialAst": true,
        "minDiagnostics": 1
      }
    },
    {
      "name": "recovery with error nodes",
      "expression": "Patient.[error].name",
      "tags": ["error", "recovery", "error-node"],
      "modes": ["diagnostic"],
      "expected": {
        "error": true,
        "hasPartialAst": true,
        "hasErrorNode": true,
        "astContains": ["name"]
      }
    },
    {
      "name": "recovery preserves valid parts",
      "expression": "Patient.name.given + .family",
      "tags": ["error", "recovery", "partial"],
      "modes": ["diagnostic"],
      "expected": {
        "error": true,
        "hasPartialAst": true,
        "astContains": ["given", "+"],
        "diagnostics": [{
          "code": "EXPECTED_EXPRESSION",
          "severity": "error",
          "message": "Expected expression before '.'"
        }]
      }
    },
    {
      "name": "recovery at statement boundaries",
      "expression": "a + b c + d",
      "tags": ["error", "recovery", "boundary"],
      "modes": ["diagnostic"],
      "expected": {
        "error": true,
        "hasPartialAst": true,
        "minDiagnostics": 1
      }
    },
    {
      "name": "recovery creates incomplete nodes",
      "expression": "Patient.name.",
      "tags": ["error", "recovery", "incomplete"],
      "modes": ["diagnostic"],
      "expected": {
        "error": true,
        "hasPartialAst": true,
        "hasIncompleteNode": true,
        "diagnostics": [{
          "code": "EXPECTED_IDENTIFIER",
          "severity": "error"
        }]
      }
    }
  ]
}