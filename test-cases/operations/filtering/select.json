{
  "name": "Select Function Tests",
  "description": "Tests for the select() function",
  "tests": [
    {
      "name": "select - property extraction",
      "expression": "select(name)",
      "input": [
        {
          "name": "John",
          "age": 30
        },
        {
          "name": "Jane",
          "age": 25
        }
      ],
      "expected": [
        "John",
        "Jane"
      ],
      "tags": [
        "function",
        "select",
        "transform",
        "function:select"
      ]
    },
    {
      "name": "select - expression",
      "expression": "select($this * 2)",
      "input": [
        1,
        2,
        3
      ],
      "expected": [
        2,
        4,
        6
      ],
      "tags": [
        "function",
        "select",
        "transform",
        "expression",
        "function:select"
      ]
    },
    {
      "name": "select - flattening",
      "expression": "select(names)",
      "input": [
        {
          "names": [
            "John",
            "J"
          ]
        },
        {
          "names": [
            "Jane"
          ]
        }
      ],
      "expected": [
        "John",
        "J",
        "Jane"
      ],
      "tags": [
        "function",
        "select",
        "transform",
        "flatten",
        "function:select"
      ]
    },
    {
      "name": "select - empty input",
      "expression": "{}.select(name)",
      "input": [],
      "expected": [],
      "tags": [
        "function",
        "select",
        "empty",
        "function:select"
      ]
    },
    {
      "name": "select - complex expression",
      "expression": "select(first & ' ' & last)",
      "input": [
        {
          "first": "John",
          "last": "Doe"
        },
        {
          "first": "Jane",
          "last": "Smith"
        }
      ],
      "expected": [
        "John Doe",
        "Jane Smith"
      ],
      "tags": [
        "function",
        "select",
        "transform",
        "complex",
        "function:select"
      ]
    },
    {
      "name": "select - with explicit $this",
      "expression": "$this.select(name)",
      "input": [
        {
          "name": "John",
          "age": 30
        },
        {
          "name": "Jane",
          "age": 25
        }
      ],
      "expected": [
        "John",
        "Jane"
      ],
      "tags": [
        "function",
        "select",
        "transform",
        "$this",
        "function:select"
      ]
    },
    {
      "name": "select - using $index",
      "expression": "$this.select($index)",
      "input": [
        "a",
        "b",
        "c"
      ],
      "expected": [
        0,
        1,
        2
      ],
      "tags": [
        "function",
        "select",
        "transform",
        "$index",
        "function:select"
      ]
    },
    {
      "name": "select - variables should not leak from inner scope",
      "expression": "defineVariable('outer', 'outer-value').select(defineVariable('inner', 'inner-value').select(%inner)).select(%outer & '-' & %inner)",
      "input": [
        {}
      ],
      "expected": [],
      "tags": [
        "function",
        "select",
        "defineVariable",
        "scope",
        "function:select"
      ],
      "description": "Variables defined inside select() should not be accessible outside that select's scope"
    },
    {
      "name": "select - simple variable scope test",
      "expression": "defineVariable('x', 1).select(defineVariable('y', 2)).select(%y)",
      "input": [
        {}
      ],
      "expected": [],
      "tags": [
        "function",
        "select",
        "defineVariable",
        "scope",
        "function:select"
      ],
      "description": "Variable %y defined inside first select() should not be accessible in second select()"
    },
    {
      "name": "select - concatenation with out-of-scope variable",
      "expression": "defineVariable('x', 1).select(defineVariable('y', 2)).where(%y.exists())",
      "input": [
        {}
      ],
      "expected": [],
      "tags": [
        "function",
        "select",
        "defineVariable",
        "scope",
        "where",
        "exists",
        "function:select"
      ],
      "description": "Using where() to test if out-of-scope variable %y exists"
    }
  ]
}