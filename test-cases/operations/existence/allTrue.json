{
  "name": "AllTrue Function Tests",
  "description": "Tests for the allTrue() function",
  "tests": [
    {
      "name": "allTrue - all true",
      "expression": "values.allTrue()",
      "input": [
        {
          "values": [
            true,
            true,
            true
          ]
        }
      ],
      "expected": [
        true
      ],
      "tags": [
        "function",
        "aggregate",
        "boolean",
        "allTrue",
        "function:allTrue"
      ]
    },
    {
      "name": "allTrue - contains false",
      "expression": "values.allTrue()",
      "input": [
        {
          "values": [
            true,
            false,
            true
          ]
        }
      ],
      "expected": [
        false
      ],
      "tags": [
        "function",
        "aggregate",
        "boolean",
        "allTrue",
        "function:allTrue"
      ]
    },
    {
      "name": "allTrue - empty collection returns true",
      "expression": "empty.allTrue()",
      "input": [
        {
          "empty": []
        }
      ],
      "expected": [
        true
      ],
      "tags": [
        "function",
        "aggregate",
        "boolean",
        "allTrue",
        "function:allTrue",
        "empty"
      ]
    },
    {
      "name": "allTrue - single true",
      "expression": "(true).allTrue()",
      "input": null,
      "expected": [
        true
      ],
      "tags": [
        "function",
        "aggregate",
        "boolean",
        "allTrue",
        "function:allTrue",
        "singleton"
      ]
    },
    {
      "name": "allTrue - single false",
      "expression": "(false).allTrue()",
      "input": null,
      "expected": [
        false
      ],
      "tags": [
        "function",
        "aggregate",
        "boolean",
        "allTrue",
        "function:allTrue",
        "singleton"
      ]
    },
    {
      "name": "allTrue - all false",
      "expression": "values.allTrue()",
      "input": [
        {
          "values": [
            false,
            false,
            false
          ]
        }
      ],
      "expected": [
        false
      ],
      "tags": [
        "function",
        "aggregate",
        "boolean",
        "allTrue",
        "function:allTrue"
      ]
    },
    {
      "name": "allTrue - direct empty collection",
      "expression": "({}).allTrue()",
      "input": null,
      "expected": [
        true
      ],
      "tags": [
        "function",
        "aggregate",
        "boolean",
        "allTrue",
        "function:allTrue",
        "empty"
      ]
    },
    {
      "name": "allTrue - with where clause example",
      "expression": "values.where($this > 90).select(true).allTrue()",
      "input": [
        {
          "values": [
            91,
            92,
            93
          ]
        }
      ],
      "expected": [
        true
      ],
      "tags": [
        "function",
        "aggregate",
        "boolean",
        "allTrue",
        "function:allTrue",
        "integration"
      ]
    },
    {
      "name": "allTrue - error on non-boolean input",
      "expression": "(5).allTrue()",
      "input": null,
      "expected": [],
      "error": {
        "type": "Error",
        "code": "FP3001",
        "phase": "analyze"
      },
      "tags": [
        "function",
        "aggregate",
        "boolean",
        "allTrue",
        "function:allTrue",
        "error"
      ]
    },
    {
      "name": "allTrue - error on mixed types",
      "expression": "mixed.allTrue()",
      "input": [
        {
          "mixed": [
            true,
            "string",
            false
          ]
        }
      ],
      "expected": [],
      "error": {
        "type": "Error",
        "code": "FP3009",
        "phase": "analyze"
      },
      "tags": [
        "function",
        "aggregate",
        "boolean",
        "allTrue",
        "function:allTrue",
        "error"
      ]
    }
  ]
}
