{
  "name": "DefineVariable Function Tests",
  "description": "Tests for the defineVariable() function (includes tests from FHIRPath Lab test suite)",
  "tests": [
    {
      "name": "simple defineVariable",
      "expression": "defineVariable('x', 5).select(%x)",
      "input": [
        {}
      ],
      "expected": [
        5
      ],
      "tags": [
        "defineVariable",
        "select"
      ]
    },
    {
      "name": "simple defineVariable with empty input",
      "expression": "defineVariable('x', 5).select(%x)",
      "input": [],
      "expected": [],
      "tags": [
        "defineVariable",
        "select"
      ]
    },
    {
      "name": "defineVariable from input",
      "expression": "defineVariable('x', value).select(%x)",
      "input": [
        {
          "value": 5
        }
      ],
      "expected": [
        5
      ],
      "tags": [
        "defineVariable",
        "select"
      ]
    },
    {
      "name": "defineVariable - with expression inside",
      "expression": "defineVariable('sum', a + b).select(%sum)",
      "input": [
        {
          "a": 1,
          "b": 2
        }
      ],
      "expected": [
        3
      ],
      "tags": [
        "defineVariable",
        "select",
        "+"
      ]
    },
    {
      "name": "defineVariable - chained definitions",
      "expression": "defineVariable('x', value).defineVariable('y', %x * 2).defineVariable('z', %x + %y).select(%z)",
      "input": [
        {
          "value": 5
        }
      ],
      "expected": [
        15
      ],
      "tags": [
        "defineVariable",
        "select",
        "*"
      ]
    },
    {
      "name": "defineVariable - property access with $this",
      "expression": "property.defineVariable('x', $this).select(%x)",
      "description": "defineVariable should set $this to input",
      "input": [
        {
          "property": 1
        }
      ],
      "expected": [
        1
      ],
      "tags": [
        "defineVariable",
        "select",
        "$this"
      ],
      "pending": "defineVariable with $this not working correctly"
    },
    {
      "name": "defineVariable - nested property access",
      "expression": "property.defineVariable('x', value).select(%x)",
      "description": "defineVariable should set $this to input",
      "input": [
        {
          "property": {
            "value": 1
          }
        }
      ],
      "expected": [
        1
      ],
      "tags": [
        "defineVariable",
        "select",
        "context-propagation"
      ],
      "pending": "defineVariable with nested property access not working"
    },
    {
      "name": "defineVariable - nested property access",
      "expression": "property.defineVariable('x', $this.value).select(%x)",
      "description": "defineVariable should set $this to input",
      "input": [
        {
          "property": {
            "value": 1
          }
        }
      ],
      "expected": [
        1
      ],
      "tags": [
        "defineVariable",
        "select",
        "context-propagation"
      ],
      "pending": "defineVariable with $this.value not working correctly"
    },
    {
      "name": "defineVariable - should propagte the input",
      "expression": "property.defineVariable('x', 1).a",
      "description": "defineVariable should propagate the input into output",
      "input": [
        {
          "property": {
            "a": 1
          }
        }
      ],
      "expected": [
        1
      ],
      "tags": [
        "defineVariable",
        "select",
        "context-propagation"
      ]
    },
    {
      "name": "[FHIRPath Lab] defineVariable1",
      "expression": "defineVariable('v1', 'value1').select(%v1)",
      "input": [
        {}
      ],
      "expected": [
        "value1"
      ],
      "tags": [
        "defineVariable",
        "fhirpath-lab",
        "select"
      ],
      "description": "simplest variable"
    },
    {
      "name": "[FHIRPath Lab] defineVariable2",
      "expression": "defineVariable('n1', name.first()).select(%n1.given)",
      "input": [
        {
          "name": [
            {
              "given": [
                "Peter",
                "James"
              ]
            },
            {
              "given": [
                "Jim"
              ]
            }
          ],
          "active": true,
          "id": "example"
        }
      ],
      "expected": [
        "Peter",
        "James"
      ],
      "tags": [
        "defineVariable",
        "fhirpath-lab",
        "select",
        "first"
      ],
      "description": "simple use of a variable"
    },
    {
      "name": "[FHIRPath Lab] defineVariable3",
      "expression": "defineVariable('n1', name.first()).select(%n1.given).first()",
      "input": [
        {
          "name": [
            {
              "given": [
                "Peter",
                "James"
              ]
            },
            {
              "given": [
                "Jim"
              ]
            }
          ],
          "active": true,
          "id": "example"
        }
      ],
      "expected": [
        "Peter"
      ],
      "tags": [
        "defineVariable",
        "fhirpath-lab",
        "select",
        "first"
      ],
      "description": "simple use of a variable 2 selects"
    },
    {
      "name": "[FHIRPath Lab] defineVariable4",
      "expression": "defineVariable('n1', name.first()).select(%n1.given) | defineVariable('n1', name.skip(1).first()).select(%n1.given)",
      "input": [
        {
          "name": [
            {
              "given": [
                "Peter",
                "James"
              ]
            },
            {
              "given": [
                "Jim"
              ]
            }
          ],
          "active": true,
          "id": "example"
        }
      ],
      "expected": [
        "Peter",
        "James",
        "Jim"
      ],
      "tags": [
        "defineVariable",
        "fhirpath-lab",
        "select",
        "|",
        "first",
        "skip"
      ],
      "description": "use of a variable in separate contexts"
    },
    {
      "name": "[FHIRPath Lab] defineVariable5",
      "expression": "defineVariable('n1', name.first()).where(active.not()) | defineVariable('n1', name.skip(1).first()).select(%n1.given)",
      "input": [
        {
          "name": [
            {
              "given": [
                "Peter",
                "James"
              ]
            },
            {
              "given": [
                "Jim"
              ]
            }
          ],
          "active": true,
          "id": "example"
        }
      ],
      "expected": [
        "Jim"
      ],
      "tags": [
        "defineVariable",
        "fhirpath-lab",
        "select",
        "where",
        "|",
        "first",
        "skip",
        "not"
      ],
      "description": "use of a variable in separate contexts defined in 2 but used in 1"
    },
    {
      "name": "[FHIRPath Lab] defineVariable6",
      "expression": "defineVariable('n1', name.first()).select(id & '-' & %n1.given.join('|')) | defineVariable('n2', name.skip(1).first()).select(%n2.given)",
      "input": [
        {
          "name": [
            {
              "given": [
                "Peter",
                "James"
              ]
            },
            {
              "given": [
                "Jim"
              ]
            }
          ],
          "active": true,
          "id": "example"
        }
      ],
      "expected": [
        "example-Peter|James",
        "Jim"
      ],
      "tags": [
        "defineVariable",
        "fhirpath-lab",
        "select",
        "&",
        "|",
        "join",
        "first",
        "skip"
      ],
      "description": "use of different variables in different contexts"
    },
    {
      "name": "[FHIRPath Lab] defineVariable7",
      "expression": "defineVariable('n1', name.first()).active | defineVariable('n2', name.skip(1).first()).select(%n2.given)",
      "input": [
        {
          "name": [
            {
              "given": [
                "Peter",
                "James"
              ]
            },
            {
              "given": [
                "Jim"
              ]
            }
          ],
          "active": true,
          "id": "example"
        }
      ],
      "expected": [
        true,
        "Jim"
      ],
      "tags": [
        "defineVariable",
        "fhirpath-lab",
        "select",
        "|",
        "first",
        "skip",
        "navigation"
      ],
      "description": "2 vars, one unused"
    },
    {
      "name": "[FHIRPath Lab] defineVariable8",
      "expression": "defineVariable('v1', 'value1').select(%v1).trace('data').defineVariable('v2', 'value2').select($this & ':' & %v1 & '-' & %v2) | defineVariable('v3', 'value3').select(%v3)",
      "input": [{}],
      "expected": [
        "value1:value1-value2",
        "value3"
      ],
      "tags": [
        "defineVariable",
        "fhirpath-lab",
        "select",
        "trace",
        "$this",
        "&",
        "|"
      ],
      "description": "CompositeVariableUse"
    },
    {
      "name": "[FHIRPath Lab] defineVariable9",
      "expression": "defineVariable('n1', name.first()).active | defineVariable('n2', name.skip(1).first()).select(%n1.given)",
      "input": [
        {
          "name": [
            {
              "given": [
                "Peter",
                "James"
              ]
            },
            {
              "given": [
                "Jim"
              ]
            }
          ],
          "active": true,
          "id": "example"
        }
      ],
      "expected": [],
      "error": {
        "type": "EvaluationError",
        "message": "Variable.*n1.*not.*defined.*scope",
        "phase": "evaluate"
      },
      "tags": [
        "defineVariable",
        "fhirpath-lab",
        "select",
        "|",
        "first",
        "skip",
        "navigation",
        "error"
      ],
      "description": "use of a variable outside context throws error"
    },
    {
      "name": "[FHIRPath Lab] defineVariable10",
      "expression": "select(%fam.given)",
      "input": [
        {}
      ],
      "expected": [],
      "error": {
        "type": "EvaluationError",
        "message": "Variable.*fam.*not.*defined",
        "phase": "evaluate"
      },
      "tags": [
        "defineVariable",
        "fhirpath-lab",
        "select",
        "error"
      ],
      "description": "use undefined variable throws error"
    },
    {
      "name": "[FHIRPath Lab] dvRedefiningVariableThrowsError",
      "expression": "defineVariable('v1').defineVariable('v1').select(%v1)",
      "input": [
        {}
      ],
      "expected": [],
      "error": {
        "type": "EvaluationError",
        "message": "Variable.*v1.*already.*defined",
        "phase": "evaluate"
      },
      "tags": [
        "defineVariable",
        "fhirpath-lab",
        "select",
        "error"
      ],
      "description": "Redefining a variable in the same scope throws error",
      "pending": "Variable redefinition checking not implemented"
    },
    {
      "name": "[FHIRPath Lab] defineVariable12",
      "expression": "Patient.name.defineVariable('n1', first()).active | Patient.name.defineVariable('n2', skip(1).first()).select(%n1.given)",
      "input": [
        {
          "resourceType": "Patient",
          "name": [
            {
              "use": "official",
              "family": "Chalmers",
              "given": [
                "Peter",
                "James"
              ]
            },
            {
              "use": "usual",
              "given": "Jim"
            },
            {
              "use": "maiden",
              "family": "Windsor",
              "given": [
                "Peter",
                "James"
              ]
            }
          ]
        }
      ],
      "expected": [],
      "tags": [
        "defineVariable",
        "fhirpath-lab",
        "select",
        "|",
        "first",
        "navigation"
      ],
      "description": "defineVariable() could not be the first child",
      "pending": "Test expects empty but variable scoping correctly throws error"
    },
    {
      "name": "[FHIRPath Lab] defineVariable13",
      "expression": "Patient.name.defineVariable('n2', skip(1).first()).defineVariable('res', %n2.given+%n2.given).select(%res)",
      "input": [
        {
          "resourceType": "Patient",
          "name": [
            {
              "use": "official",
              "family": "Chalmers",
              "given": [
                "Peter",
                "James"
              ]
            },
            {
              "use": "usual",
              "given": "Jim"
            },
            {
              "use": "maiden",
              "family": "Windsor",
              "given": [
                "Peter",
                "James"
              ]
            }
          ]
        }
      ],
      "expected": [
        "JimJim",
        "JimJim",
        "JimJim"
      ],
      "tags": [
        "defineVariable",
        "fhirpath-lab",
        "select",
        "+",
        "first"
      ],
      "description": "sequence of variable definitions tweak"
    },
    {
      "name": "[FHIRPath Lab] defineVariable14",
      "expression": "Patient.name.defineVariable('n1', first()).select(%n1).exists() | Patient.name.defineVariable('n2', skip(1).first()).defineVariable('res', %n2.given+%n2.given).select(%res)",
      "input": [
        {
          "resourceType": "Patient",
          "name": [
            {
              "use": "official",
              "family": "Chalmers",
              "given": [
                "Peter",
                "James"
              ]
            },
            {
              "use": "usual",
              "given": "Jim"
            },
            {
              "use": "maiden",
              "family": "Windsor",
              "given": [
                "Peter",
                "James"
              ]
            }
          ]
        }
      ],
      "expected": [
        true,
        "JimJim",
        "JimJim",
        "JimJim"
      ],
      "tags": [
        "defineVariable",
        "fhirpath-lab",
        "select",
        "+",
        "|",
        "first",
        "exists"
      ],
      "description": "sequence of variable definitions original"
    },
    {
      "name": "[FHIRPath Lab] defineVariable15",
      "expression": "defineVariable('root', 'r1-').select(defineVariable('v1', 'v1').defineVariable('v2', 'v2').select(%v1 | %v2)).select(%root & $this)",
      "input": [
        {}
      ],
      "expected": [
        "r1-v1",
        "r1-v2"
      ],
      "pending": "temporary disable",
      "tags": [
        "defineVariable",
        "fhirpath-lab",
        "select",
        "$this",
        "&",
        "|"
      ],
      "description": "multi-tree vars valid"
    },
    {
      "name": "[FHIRPath Lab] defineVariable16",
      "expression": "defineVariable('root', 'r1-').select(defineVariable('v1', 'v1').defineVariable('v2', 'v2').select(%v1 | %v2)).select(%root & $this & %v1)",
      "input": [
        {}
      ],
      "expected": [],
      "tags": [
        "defineVariable",
        "fhirpath-lab",
        "select",
        "$this",
        "&",
        "|"
      ],
      "description": "multi-tree vars exception",
      "pending": "Probably wrong test case"
    },
    {
      "name": "[FHIRPath Lab] dvCantOverwriteSystemVar",
      "expression": "defineVariable('context', 'oops')",
      "input": [
        {}
      ],
      "expected": [],
      "error": {
        "type": "EvaluationError",
        "message": "Cannot.*override.*system.*variable.*context",
        "phase": "evaluate"
      },
      "tags": [
        "defineVariable",
        "fhirpath-lab",
        "error"
      ],
      "description": "Cannot override system variables",
      "pending": "System variable protection not implemented"
    },
    {
      "name": "[FHIRPath Lab] defineVariable19",
      "expression": "defineVariable(defineVariable('param','ppp').select(%param), defineVariable('param','value').select(%param)).select(%ppp)",
      "input": [
        {}
      ],
      "expected": [
        "value"
      ],
      "tags": [
        "defineVariable",
        "fhirpath-lab",
        "select"
      ],
      "description": "defineVariable in function parameters (1)",
      "pending": "Dynamic variable names not supported"
    },
    {
      "name": "[FHIRPath Lab] dvParametersDontColide",
      "expression": "'aaa'.replace(defineVariable('param', 'aaa').select(%param), defineVariable('param','bbb').select(%param))",
      "input": [
        {}
      ],
      "expected": [
        "bbb"
      ],
      "tags": [
        "defineVariable",
        "fhirpath-lab",
        "select",
        "replace"
      ],
      "description": "defineVariable in function parameters (2)"
    },
    {
      "name": "[FHIRPath Lab] dvUsageOutsideScopeThrows",
      "expression": "defineVariable('n1', 'v1').active | defineVariable('n2', 'v2').select(%n1)",
      "input": [
        {
          "active": true
        }
      ],
      "expected": [],
      "error": {
        "type": "EvaluationError",
        "message": "Variable.*n1.*not.*defined.*scope",
        "phase": "evaluate"
      },
      "tags": [
        "defineVariable",
        "fhirpath-lab",
        "select",
        "|",
        "navigation",
        "error"
      ],
      "description": "use of a variable outside context throws error"
    }
  ]
}
