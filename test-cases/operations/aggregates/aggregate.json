{
  "name": "Aggregate Function Tests",
  "description": "Tests for the aggregate() function",
  "tests": [
    {
      "name": "aggregate - sum with init value 0",
      "expression": "(1 | 2 | 3 | 4 | 5).aggregate($this + $total, 0)",
      "input": [],
      "expected": [
        15
      ],
      "tags": [
        "aggregate",
        "sum"
      ]
    },
    {
      "name": "aggregate - sum with init value 2",
      "expression": "(1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9).aggregate($this + $total, 2)",
      "input": [],
      "expected": [
        47
      ],
      "tags": [
        "aggregate",
        "sum",
        "init"
      ]
    },
    {
      "name": "aggregate - minimum value without init",
      "expression": "(1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9).aggregate(iif($total.empty(), $this, iif($this < $total, $this, $total)))",
      "input": [],
      "expected": [
        1
      ],
      "tags": [
        "aggregate",
        "min"
      ]
    },
    {
      "name": "aggregate - maximum value without init",
      "expression": "(1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9).aggregate(iif($total.empty(), $this, iif($this > $total, $this, $total)))",
      "input": [],
      "expected": [
        9
      ],
      "tags": [
        "aggregate",
        "max"
      ]
    },
    {
      "name": "aggregate - concatenate strings",
      "expression": "('a' | 'b' | 'c').aggregate($total + $this, '')",
      "input": [],
      "expected": [
        "abc"
      ],
      "tags": [
        "aggregate",
        "string",
        "concat"
      ]
    },
    {
      "name": "aggregate - empty input with init",
      "expression": "{ }.aggregate($this + $total, 10)",
      "input": [],
      "expected": [
        10
      ],
      "tags": [
        "aggregate",
        "empty",
        "init"
      ]
    },
    {
      "name": "aggregate - empty input without init",
      "expression": "{ }.aggregate($this + $total)",
      "input": [],
      "expected": [],
      "tags": [
        "aggregate",
        "empty"
      ]
    },
    {
      "name": "aggregate - using $index variable",
      "expression": "(10 | 20 | 30).aggregate($total + $this * $index, 0)",
      "input": [],
      "expected": [
        80
      ],
      "tags": [
        "aggregate",
        "index"
      ]
    },
    {
      "name": "aggregate - collect items into array",
      "expression": "(1 | 2 | 3).aggregate($total | $this, { })",
      "input": [],
      "expected": [
        1,
        2,
        3
      ],
      "tags": [
        "aggregate",
        "collect"
      ]
    },
    {
      "name": "aggregate - count using aggregate",
      "expression": "(1 | 2 | 3 | 4 | 5).aggregate($total + 1, 0)",
      "input": [],
      "expected": [
        5
      ],
      "tags": [
        "aggregate",
        "count"
      ]
    },
    {
      "name": "aggregate - product calculation",
      "expression": "(2 | 3 | 4).aggregate($this * $total, 1)",
      "input": [],
      "expected": [
        24
      ],
      "tags": [
        "aggregate",
        "product"
      ]
    },
    {
      "name": "aggregate - on property path",
      "expression": "name.given.aggregate($total + ', ' + $this, '').substring(2)",
      "input": {
        "resourceType": "Patient",
        "name": [
          {
            "given": [
              "John",
              "James"
            ],
            "family": "Smith"
          }
        ]
      },
      "expected": [
        "John, James"
      ],
      "tags": [
        "aggregate",
        "path",
        "string"
      ]
    },
    {
      "name": "aggregate - error on missing aggregator",
      "expression": "(1 | 2 | 3).aggregate()",
      "input": [],
      "error": {
        "type": "ArgumentError",
        "message": "aggregate requires at least one argument",
        "phase": "analyze",
        "code": "FP2001"
      },
      "tags": [
        "aggregate",
        "error",
        "arguments"
      ]
    },
    {
      "name": "aggregate - FHIRPath Lab test 1",
      "expression": "(1|2|3|4|5|6|7|8|9).aggregate($this+$total, 0) = 45",
      "input": [],
      "expected": [
        true
      ],
      "tags": [
        "aggregate",
        "fhirpath-lab"
      ]
    },
    {
      "name": "aggregate - FHIRPath Lab test 2",
      "expression": "(1|2|3|4|5|6|7|8|9).aggregate($this+$total, 2) = 47",
      "input": [],
      "expected": [
        true
      ],
      "tags": [
        "aggregate",
        "fhirpath-lab"
      ]
    },
    {
      "name": "aggregate - FHIRPath Lab test 3",
      "expression": "(1|2|3|4|5|6|7|8|9).aggregate(iif($total.empty(), $this, iif($this < $total, $this, $total))) = 1",
      "input": [],
      "expected": [
        true
      ],
      "tags": [
        "aggregate",
        "fhirpath-lab"
      ]
    },
    {
      "name": "aggregate - FHIRPath Lab test 4",
      "expression": "(1|2|3|4|5|6|7|8|9).aggregate(iif($total.empty(), $this, iif($this > $total, $this, $total))) = 9",
      "input": [],
      "expected": [
        true
      ],
      "tags": [
        "aggregate",
        "fhirpath-lab"
      ]
    },
    {
      "name": "aggregate - string concatenation without init",
      "expression": "name.given.aggregate(iif($total.empty(), $this, $total + ', ' + $this))",
      "input": {
        "resourceType": "Patient",
        "name": [
          {
            "given": [
              "John",
              "James"
            ],
            "family": "Smith"
          }
        ]
      },
      "expected": [
        "John, James"
      ],
      "tags": [
        "aggregate",
        "string",
        "no-init"
      ]
    },
    {
      "name": "aggregate - build object without init",
      "expression": "Observation.component.aggregate(iif($total.empty(), {}, $total.where(code = $this.code).aggregate($total | {code: $this.code, values: (value | $this.value)})))",
      "input": {
        "resourceType": "Observation",
        "component": [
          {
            "code": "A",
            "value": 1
          },
          {
            "code": "B",
            "value": 2
          },
          {
            "code": "A",
            "value": 3
          }
        ]
      },
      "expected": [
        {
          "code": "A",
          "values": [
            1,
            3
          ]
        },
        {
          "code": "B",
          "values": [
            2
          ]
        }
      ],
      "tags": [
        "aggregate",
        "complex",
        "no-init"
      ],
      "pending": "Cannot infer aggregate result type without init parameter"
    },
    {
      "name": "aggregate - type-dependent operations without init",
      "expression": "(1 | 2 | 3).aggregate(iif($total.empty(), $this.toString(), $total + ',' + $this.toString())).split(',')",
      "input": [],
      "expected": [
        "1",
        "2",
        "3"
      ],
      "tags": [
        "aggregate",
        "type-conversion",
        "no-init"
      ]
    },
    {
      "name": "aggregate - polymorphic result without init",
      "expression": "Patient.contact.aggregate(iif($total.empty(), $this.name, $total | $this.name))",
      "input": {
        "resourceType": "Patient",
        "contact": [
          {
            "name": {
              "text": "John Doe"
            }
          },
          {
            "name": {
              "text": "Jane Doe"
            }
          }
        ]
      },
      "expected": [
        {
          "text": "John Doe"
        },
        {
          "text": "Jane Doe"
        }
      ],
      "tags": [
        "aggregate",
        "polymorphic",
        "no-init"
      ],
      "pending": "Cannot determine if result is single item or collection without init"
    }
  ]
}
