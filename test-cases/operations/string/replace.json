{
  "name": "Replace Function Tests",
  "description": "Tests for the replace() string function",
  "tests": [
    {
      "name": "replace - basic substitution",
      "expression": "'abcdefg'.replace('cde', '123')",
      "input": [],
      "expected": [
        "ab123fg"
      ],
      "tags": [
        "function",
        "string",
        "replace",
        "function:replace"
      ]
    },
    {
      "name": "replace - remove pattern",
      "expression": "'abcdefg'.replace('cde', '')",
      "input": [],
      "expected": [
        "abfg"
      ],
      "tags": [
        "function",
        "string",
        "replace",
        "function:replace"
      ]
    },
    {
      "name": "replace - empty pattern",
      "expression": "'abc'.replace('', 'x')",
      "input": [],
      "expected": [
        "xaxbxcx"
      ],
      "tags": [
        "function",
        "string",
        "replace",
        "empty",
        "function:replace"
      ]
    },
    {
      "name": "replace - multiple occurrences",
      "expression": "'banana'.replace('a', 'o')",
      "input": [],
      "expected": [
        "bonono"
      ],
      "tags": [
        "function",
        "string",
        "replace",
        "function:replace"
      ]
    },
    {
      "name": "replace - pattern not found",
      "expression": "'hello'.replace('xyz', 'abc')",
      "input": [],
      "expected": [
        "hello"
      ],
      "tags": [
        "function",
        "string",
        "replace",
        "function:replace"
      ]
    },
    {
      "name": "replace - empty input returns empty",
      "expression": "replace('a', 'b')",
      "input": [],
      "expected": [],
      "tags": [
        "function",
        "string",
        "replace",
        "empty",
        "function:replace"
      ]
    },
    {
      "name": "replace - non-string input throws error",
      "expression": "(123).replace('2', '5')",
      "input": [],
      "expected": [],
      "error": {
        "type": "EvaluationError",
        "message": "Type.*not.*assignable.*String",
        "phase": "analyze",
        "code": "FP3001"
      },
      "tags": [
        "function",
        "string",
        "replace",
        "type",
        "error",
        "function:replace"
      ]
    },
    {
      "name": "replace - empty pattern collection returns empty",
      "expression": "'abc'.replace({}, 'x')",
      "input": [],
      "expected": [],
      "tags": [
        "function",
        "string",
        "replace",
        "empty",
        "function:replace"
      ]
    },
    {
      "name": "replace - empty substitution collection returns empty",
      "expression": "'abc'.replace('a', {})",
      "input": [],
      "expected": [],
      "tags": [
        "function",
        "string",
        "replace",
        "empty",
        "function:replace"
      ]
    },
    {
      "name": "replace - multiple input items throws error",
      "expression": "('a' | 'b').replace('a', 'x')",
      "input": [],
      "expected": [],
      "error": {
        "type": "EvaluationError",
        "phase": "analyze",
        "code": "FP3001"
      },
      "tags": [
        "function",
        "string",
        "replace",
        "error",
        "function:replace"
      ]
    },
    {
      "name": "replace - on input property",
      "expression": "text.replace('old', 'new')",
      "input": [
        {
          "text": "old value old"
        }
      ],
      "expected": [
        "new value new"
      ],
      "tags": [
        "function",
        "string",
        "replace",
        "navigation",
        "function:replace"
      ]
    },
    {
      "name": "replace - special characters",
      "expression": "'a.b.c'.replace('.', '-')",
      "input": [],
      "expected": [
        "a-b-c"
      ],
      "tags": [
        "function",
        "string",
        "replace",
        "special",
        "function:replace"
      ]
    },
    {
      "name": "replace - whole string",
      "expression": "'hello'.replace('hello', 'goodbye')",
      "input": [],
      "expected": [
        "goodbye"
      ],
      "tags": [
        "function",
        "string",
        "replace",
        "function:replace"
      ]
    },
    {
      "name": "replace - case sensitive",
      "expression": "'Hello'.replace('hello', 'hi')",
      "input": [],
      "expected": [
        "Hello"
      ],
      "tags": [
        "function",
        "string",
        "replace",
        "case",
        "function:replace"
      ]
    },
    {
      "name": "[FHIRPath Lab] testReplace1",
      "expression": "'123456'.replace('234', 'X')",
      "input": [],
      "expected": [
        "1X56"
      ],
      "tags": [
        "function",
        "string",
        "replace",
        "fhirpath-lab",
        "function:replace"
      ]
    },
    {
      "name": "[FHIRPath Lab] testReplace2",
      "expression": "'abc'.replace('', 'x')",
      "input": [],
      "expected": [
        "xaxbxcx"
      ],
      "tags": [
        "function",
        "string",
        "replace",
        "empty",
        "fhirpath-lab",
        "function:replace"
      ]
    },
    {
      "name": "[FHIRPath Lab] testReplace3",
      "expression": "'123456'.replace('234', '')",
      "input": [],
      "expected": [
        "156"
      ],
      "tags": [
        "function",
        "string",
        "replace",
        "fhirpath-lab",
        "function:replace"
      ]
    },
    {
      "name": "[FHIRPath Lab] testReplace4",
      "expression": "{}.replace('234', 'X').empty() = true",
      "input": [],
      "expected": [
        true
      ],
      "tags": [
        "function",
        "string",
        "replace",
        "empty",
        "fhirpath-lab",
        "function:replace"
      ]
    },
    {
      "name": "[FHIRPath Lab] testReplace5",
      "expression": "'123'.replace({}, 'X').empty() = true",
      "input": [],
      "expected": [
        true
      ],
      "tags": [
        "function",
        "string",
        "replace",
        "empty",
        "fhirpath-lab",
        "function:replace"
      ]
    },
    {
      "name": "[FHIRPath Lab] testReplace6",
      "expression": "'123'.replace('2', {}).empty() = true",
      "input": [],
      "expected": [
        true
      ],
      "tags": [
        "function",
        "string",
        "replace",
        "empty",
        "fhirpath-lab",
        "function:replace"
      ]
    }
  ]
}
