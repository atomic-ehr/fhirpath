{
  "name": "Power Function Tests",
  "description": "Tests for the power() function",
  "tests": [
    {
      "name": "power - integer base and exponent",
      "expression": "2.power(3)",
      "input": [],
      "expected": [
        8
      ],
      "tags": [
        "math",
        "power",
        "integer"
      ]
    },
    {
      "name": "power - decimal base",
      "expression": "2.5.power(2)",
      "input": [],
      "expected": [
        6.25
      ],
      "tags": [
        "math",
        "power",
        "decimal"
      ]
    },
    {
      "name": "power - negative exponent",
      "expression": "2.power(-1)",
      "input": [],
      "expected": [
        0.5
      ],
      "tags": [
        "math",
        "power",
        "negative"
      ]
    },
    {
      "name": "power - zero exponent",
      "expression": "5.power(0)",
      "input": [],
      "expected": [
        1
      ],
      "tags": [
        "math",
        "power",
        "zero"
      ]
    },
    {
      "name": "power - zero base",
      "expression": "0.power(5)",
      "input": [],
      "expected": [
        0
      ],
      "tags": [
        "math",
        "power",
        "zero"
      ]
    },
    {
      "name": "power - one base",
      "expression": "1.power(100)",
      "input": [],
      "expected": [
        1
      ],
      "tags": [
        "math",
        "power"
      ]
    },
    {
      "name": "power - fractional exponent",
      "expression": "4.power(0.5)",
      "input": [],
      "expected": [
        2
      ],
      "tags": [
        "math",
        "power",
        "fractional"
      ]
    },
    {
      "name": "power - negative base with fractional exponent returns empty",
      "expression": "(-1).power(0.5)",
      "input": [],
      "expected": [],
      "tags": [
        "math",
        "power",
        "negative",
        "fractional"
      ]
    },
    {
      "name": "power - negative base with integer exponent",
      "expression": "(-2).power(3)",
      "input": [],
      "expected": [
        -8
      ],
      "tags": [
        "math",
        "power",
        "negative"
      ]
    },
    {
      "name": "power - negative base with even exponent",
      "expression": "(-3).power(2)",
      "input": [],
      "expected": [
        9
      ],
      "tags": [
        "math",
        "power",
        "negative"
      ]
    },
    {
      "name": "power - empty input",
      "expression": "{ }.power(2)",
      "input": [],
      "expected": [],
      "tags": [
        "math",
        "power",
        "empty"
      ]
    },
    {
      "name": "power - empty exponent",
      "expression": "2.power({ })",
      "input": [],
      "expected": [],
      "tags": [
        "math",
        "power",
        "empty"
      ]
    },
    {
      "name": "power - multiple items error",
      "expression": "(2 | 3).power(2)",
      "input": [],
      "error": {
        "type": "Error",
        "phase": "analyze",
        "code": "FP2003"
      },
      "tags": [
        "math",
        "power",
        "error"
      ]
    },
    {
      "name": "power - no arguments error",
      "expression": "2.power()",
      "input": [],
      "error": {
        "type": "Error",
        "code": "FP2001",
        "phase": "analyze"
      },
      "tags": [
        "math",
        "power",
        "error"
      ]
    },
    {
      "name": "power - too many arguments error",
      "expression": "2.power(3, 4)",
      "input": [],
      "error": {
        "type": "Error",
        "code": "FP2001",
        "phase": "analyze"
      },
      "tags": [
        "math",
        "power",
        "error"
      ]
    },
    {
      "name": "power - on string error",
      "expression": "'2'.power(3)",
      "input": [],
      "error": {
        "type": "Error",
        "code": "FP3001",
        "phase": "analyze"
      },
      "tags": [
        "math",
        "power",
        "error",
        "type"
      ]
    },
    {
      "name": "power - non-numeric exponent error",
      "expression": "2.power('3')",
      "input": [],
      "error": {
        "type": "Error",
        "code": "FP3003",
        "phase": "analyze"
      },
      "tags": [
        "math",
        "power",
        "error",
        "type"
      ]
    }
  ]
}
