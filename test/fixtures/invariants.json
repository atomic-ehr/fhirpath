[
  "$this in %resource.actor.key",
  "$this.length() <= 255",
  "$this.matches('[^\\\\s]+( [^\\\\s]+)*')",
  "$this.where(element[0].mustSupport='true').exists().not()",
  "%context.repeat(action).relatedAction.where((targetId in %context.repeat(action).id).not()).exists().not()",
  "%context.repeat(action).where((goalId in %context.goal.id).not()).exists().not()",
  "%resource.instance.where(key=%context.instanceReference).exists()",
  "%resource.kind = 'logical' or element.all(definition.exists() and min.exists() and max.exists())",
  "%resource.process.descendants().select(instanceReference).where($this=%context.key).exists()",
  "%resource.process.descendants().select(operation).where(initiator=%context.key or receiver=%context.key).exists()",
  "%resource.status='active' or %resource.status='retired' implies step.exists()",
  "($this is Range) implies ((low.empty() or ((low.code.exists() or low.value.empty()) and (low.system.empty() or low.system = %ucum) and (low.code.empty() or low.code = '1') and (low.value.empty() or low.value.hasValue().not() or low.value.toString().contains('.').not()) and (low.value.empty() or low.value.hasValue().not() or low.value >= 0))) and (high.empty() or ((high.code.exists() or high.value.empty()) and (high.system.empty() or high.system = %ucum) and (high.code.empty() or high.code = '1') and (high.value.empty() or high.value.hasValue().not() or high.value.toString().contains('.').not()) and (high.value.empty() or high.value.hasValue().not() or high.value >= 0))))",
  "(%resource.kind = 'logical' or element.first().path = %resource.type) and element.tail().all(path.startsWith(%resource.snapshot.element.first().path&'.'))",
  "(%resource.kind = 'logical' or element.first().path.startsWith(%resource.type)) and (element.tail().empty() or  element.tail().all(path.startsWith(%resource.differential.element.first().path.replaceMatches('\\\\..*','')&'.')))",
  "(('coding' | 'decimal' | 'integer' | 'date' | 'dateTime' | 'time' | 'string' | 'quantity' | 'reference' | 'uri') contains type) or answerOption.empty()",
  "(('coding' | 'string' | 'uri') contains type) or answerValueSet.empty()",
  "((kind in 'resource' | 'complex-type') and (derivation = 'specialization')) implies differential.element.where((min != 0 and min != 1) or (max != '1' and max != '*')).empty()",
  "((lowNumerator.exists() or highNumerator.exists()) and denominator.exists()) or (lowNumerator.empty() and highNumerator.empty() and denominator.empty() and extension.exists())",
  "(ClinicalUseDefinition.indication.count() + ClinicalUseDefinition.contraindication.count() + ClinicalUseDefinition.interaction.count() + ClinicalUseDefinition.undesirableEffect.count() + ClinicalUseDefinition.warning.count())  < 2",
  "(answer.exists() and item.exists()).not()",
  "(code.exists() and valueSet.empty()) or (code.empty() and valueSet.exists())",
  "(code.exists() or value.empty()) and (system.empty() or system = %ucum)",
  "(code.exists() or value.empty()) and (system.empty() or system = %ucum) and (code.empty() or code = '1') and (value.empty() or value.hasValue().not() or value.toString().contains('.').not()) and (value.empty() or value.hasValue().not() or value >= 0)",
  "(code.exists() or value.empty()) and (system.empty() or system = %ucum) and (value.empty() or value.hasValue().not() or value > 0)",
  "(code.exists() or value.empty()) and (system.empty() or system = 'urn:iso:std:iso:4217')",
  "(code='Reference' or code = 'canonical' or code = 'CodeableReference') or targetProfile.empty()",
  "(comparator.exists() and modifier.exists()).not()",
  "(component.empty() and hasMember.empty()) implies (dataAbsentReason.exists() or value.exists())",
  "(concept.exists() or filter.exists()) implies system.exists()",
  "(description.count() + software.count() + implementation.count()) > 0",
  "(detail.exists() and measure.exists()) or detail.exists().not()",
  "(dose.exists() or rate.exists() or text.exists())",
  "(effective as dateTime).toString().length() >= 8",
  "(identifier.count() + name.count()) > 0",
  "(isModifier.exists() and isModifier) implies isModifierReason.exists()",
  "(kind != 'capability') or (implementation.exists().not() and software.exists())",
  "(kind != 'instance') or implementation.exists()",
  "(kind = 'query') implies ((parameter.where(use = 'out').count() = 1) and (parameter.where(use = 'out').all(name = 'result' and type = 'Bundle')))",
  "(kind = 'query') implies (instance = false)",
  "(kind = 'query') implies (parameter.all((use = 'in' and searchType.exists()) or (use != 'in')))",
  "(kind!='logical'  and differential.element.first().path.contains('.').not()) implies differential.element.first().type.empty()",
  "(kind!='requirements') or (implementation.exists().not() and software.exists().not())",
  "(low.empty() or ((low.code = '%') and (low.system = %ucum))) and (high.empty() or ((high.code = '%') and (high.system = %ucum)))",
  "(max = '*') or iif(max != '*', min <= max.toInteger())",
  "(mode != 'fixed') implies (code.empty() and display.empty() and valueSet.empty())",
  "(mode != 'other-map') implies otherMap.empty()",
  "(mode != 'other-map') implies relationship.exists()",
  "(mode = 'fixed') implies ((code.exists() and valueSet.empty()) or (code.empty() and valueSet.exists()))",
  "(mode = 'other-map') implies otherMap.exists()",
  "(noMap.exists() and noMap=true) implies target.empty()",
  "(numerator.exists() and denominator.exists()) or (numerator.empty() and denominator.empty() and extension.exists())",
  "(organizer.exists() and organizer.allTrue()) implies (value.empty() and dataAbsentReason.empty() and component.empty())",
  "(part.exists() and value.empty() and resource.empty()) or (part.empty() and (value.exists() xor resource.exists()))",
  "(process.exists() implies workflow.empty() and operation.empty()) and (workflow.exists() implies operation.empty())",
  "(reference.resolve().exists() and reference.resolve() is Group) implies reference.resolve().member.entity.resolve().all($this is Specimen)",
  "(response.empty() and responseCode.empty() and direction = 'request') or direction.empty() or direction = 'response'",
  "(severity = 'error') implies suppress.empty()",
  "(snapshot | differential).element.all(path.contains('.').not() implies sliceName.empty())",
  "(start.exists() and end.exists()) or (status in ('proposed' | 'cancelled' | 'waitlist'))",
  "(type != 'data-exchange') or group.exists().not()",
  "(type = 'event-notification' or type = 'query-event') implies notificationEvent.exists()",
  "(type = 'history') or entry.where(fullUrl.exists()).select(fullUrl&iif(resource.meta.versionId.exists(), resource.meta.versionId, '')).isDistinct()",
  "(type = 'named-event' implies name.exists()) and (type = 'periodic' implies timing.exists()) and (type.startsWith('data-') implies data.exists())",
  "(type = 'searchset') or entry.search.empty()",
  "(type in ('boolean' | 'decimal' | 'integer' | 'string' | 'text' | 'url')) or answerConstraint='optionOrString' or maxLength.empty()",
  "(type!='group' and type!='display') or initial.empty()",
  "(type.exists() or nutritionProduct.exists())",
  "(type='group' and %resource.status='active') implies item.empty().not()",
  "(use = 'out') implies searchType.empty()",
  "(value.exists() and valueSet.empty()) or (value.empty() and valueSet.exists())",
  "(whenHandedOver.hasValue() and whenPrepared.hasValue()) implies whenHandedOver >= whenPrepared",
  "AdministrableProductDefinition.formOf.resolve().route.empty()",
  "CodeSystem.content = 'supplement' implies CodeSystem.supplements.exists()",
  "Group.type.exists() or (Group.membership = 'conceptual')",
  "Ingredient.where(allergenicIndicator=true).count() + Ingredient.substance.code.reference.count()  < 2",
  "Requirements.actor.key.isDistinct()",
  "abatement.exists() implies (clinicalStatus.coding.where(system='http://terminology.hl7.org/CodeSystem/condition-clinical' and (code='inactive' or code='resolved' or code='remission')).exists())",
  "abstract = true or baseDefinition.exists()",
  "actor.exists() or type.exists()",
  "actor.exists(resolve() is Patient or resolve() is Group) implies type.exists().not()",
  "actor.key.count() = actor.key.distinct().count()",
  "actor.title.count() = actor.title.distinct().count()",
  "additionalUse.exists() implies use.exists()",
  "address.where(use = 'home').empty()",
  "age.empty() or born.empty()",
  "age.empty() or deceased.empty()",
  "age.exists() or estimatedAge.empty()",
  "aggregation.empty() or (code = 'Reference') or (code = 'canonical') or (code = 'CodeableReference')",
  "allDay.exists().not() or (allDay implies availableStartTime.exists().not() and availableEndTime.exists().not())",
  "alternative.title.count() = alternative.title.distinct().count()",
  "answerConstraint.exists() implies answerOption.exists() or answerValueSet.exists()",
  "answerOption.empty() or answerValueSet.empty()",
  "answerOption.empty() or initial.empty()",
  "answerOption.value.exists() implies defineVariable('type', type).trace('type', %type).answerOption.value.type().name.distinct().select(iif($this='simplequantity', 'quantity', $this.lower())).where(%type!=$this and (%type='text' and $this='string').not() and (%type='url' and $this='uri').not()).trace('Unmatched answerOption type(s)').empty()",
  "asNeededFor.empty() or (asNeeded = true or asNeeded.empty())",
  "asNeededFor.empty() or asNeeded.empty() or asNeeded",
  "baseDefinition.exists() implies derivation.exists()",
  "binding.empty() or binding.valueSet.exists() or binding.description.exists()",
  "binding.empty() or type.code.empty() or type.code.contains(':') or type.select((code = 'code') or (code = 'Coding') or (code='CodeableConcept') or (code = 'Quantity') or (code = 'string') or (code = 'uri') or (code = 'Duration')).exists()",
  "bodySite.exists() implies bodyStructure.empty()",
  "cancellationDate.exists() implies (status='noshow' or status='cancelled')",
  "cancellationReason.exists() implies (status='noshow' or status='cancelled')",
  "capability.required.exists() or capability.validated.exists()",
  "caseSensitive.exists()",
  "category.coding.where(system='http://terminology.hl7.org/CodeSystem/condition-category' and code='problem-list-item').exists() implies clinicalStatus.coding.where(system='http://terminology.hl7.org/CodeSystem/condition-clinical' and code='unknown').exists().not()",
  "category.exists() xor productOrService.exists()",
  "chain.empty() or type = 'reference'",
  "children().element.where(path.contains('.').not()).requirements.empty()",
  "code.empty() or system.exists()",
  "code.exists() implies ((system = %ucum) and value.exists())",
  "code.exists() implies code.matches('\\\\{.*?\\\\}').not()",
  "code.exists() or abstract = true",
  "code.exists() or display.exists()",
  "code.exists().not() implies display.exists().not()",
  "code.reference.empty().not() implies dateOfService.empty()",
  "codeSystem.uri.isDistinct()",
  "collection.collector.empty() or collection.procedure.empty()",
  "comment.exists() or (%resource.status = 'draft') or relationship.empty() or ((relationship != 'source-is-broader-than-target') and (relationship != 'not-related-to'))",
  "common.exists() xor operation.exists() xor assert.exists()",
  "comparator.empty()",
  "comparator.empty() or (type in ('number' | 'date' | 'quantity' | 'special'))",
  "compareToSourceId.empty() xor (compareToSourceExpression.exists() or compareToSourcePath.exists())",
  "component.empty() or component.where(dataAbsentReason.exists()).all(value.empty())",
  "component.value.exists() or component.dataAbsentReason.exists()",
  "composition.exists() implies (composition.resolve().section.entry.reference.where(resolve() is Observation) in (result.reference|result.reference.resolve().hasMember.reference))",
  "concept.concept.exists() implies hierarchyMeaning.exists()",
  "concept.empty() or filter.empty()",
  "concept.exists() implies concept.code.combine(%resource.concept.descendants().concept.code).isDistinct()",
  "concept.where(property.code = 'parent' or property.code = 'child').exists() implies hierarchyMeaning.exists()",
  "condition.exists() implies data.exists()",
  "condition.reference.empty().not() implies dateOfDiagnosis.empty()",
  "constraint.select(key).isDistinct()",
  "contained.contained.empty()",
  "contained.meta.security.empty()",
  "contained.meta.versionId.empty() and contained.meta.lastUpdated.empty()",
  "contained.where((('#'+id.trace('id') in %resource.descendants().select(reference | as(uri))) or descendants().where(reference='#' | as(uri)='#').exists()).not()).trace('unmatched', id).empty()",
  "contains.version.exists() xor  parameter.where(name = 'system-version').exists()",
  "content in ( 'example' | 'fragment' | 'complete' ) implies concept.exists()",
  "content.exists() implies version.empty()",
  "contentReference.empty() or (type.empty() and defaultValue.empty() and fixed.empty() and pattern.empty() and example.empty() and minValue.empty() and maxValue.empty() and maxLength.empty() and binding.empty())",
  "contextInvariant.exists() implies type = 'Extension'",
  "contextPath.empty() or contextReference.exists() or contextDefinition.exists()",
  "contextReference.empty() or contextDefinition.empty()",
  "count.exists() xor countQuantity.exists()",
  "countMax.empty() or count.exists()",
  "data.empty() or contentType.exists()",
  "data.empty() or timing.empty()",
  "dataAbsentReason.empty() or value.empty()",
  "dataAbsentReason.exists() or value.exists()",
  "defaultValue.empty() or meaningWhenMissing.empty()",
  "defineVariable('sc', code).property.all((code = 'alternateCode') implies defineVariable('ac', value).%resource.repeat(concept).where(code = %ac).exists(property.where(code = 'alternateCode').value = %sc))",
  "definition.resource.fhirVersion.all(%context.fhirVersion contains $this)",
  "derivation = 'constraint' or snapshot.element.select(path).isDistinct()",
  "description.exists() or valueSet.exists()",
  "differential.element.all(id.exists()) and differential.element.id.trace('ids').isDistinct()",
  "differential.element.defaultValue.exists() implies (derivation = 'specialization')",
  "document.select(profile&mode).isDistinct()",
  "duration.empty() or durationUnit.exists()",
  "duration.exists() implies duration >= 0",
  "durationMax.empty() or duration.exists()",
  "element.all(base.exists())",
  "element.exists() implies context.exists()",
  "element.where(path.contains('.').not()).slicing.empty()",
  "element.where(type.where(code='CodeableConcept').exists() and path.endsWith('.concept') and binding.exists() and (path.substring(0,$this.path.length()-8) in %context.element.where(type.where(code='CodeableReference').exists()).path)).exists().not()",
  "element.where(type.where(code='Reference').exists() and path.endsWith('.reference') and type.targetProfile.exists() and (path.substring(0,$this.path.length()-10) in %context.element.where(type.where(code='CodeableReference').exists()).path)).exists().not()",
  "empty() or ($this = '*') or (toInteger() >= 0)",
  "emptyReason.empty() or entry.empty()",
  "enableWhen.count() > 1 implies enableBehavior.exists()",
  "exists() implies matches('^[^|# ]+$')",
  "expression.empty() or headerField.empty() or path.empty()",
  "expression.empty() or processingMode.exists()",
  "expression.exists()",
  "expression.exists() or reference.exists()",
  "extension('http://hl7.org/fhir/StructureDefinition/valueset-rules-text').exists() xor extension('http://hl7.org/fhir/StructureDefinition/valueset-expression').exists() xor compose.exists()",
  "extension.exists() != value.exists()",
  "extension.exists() or (contentType.count() + expression.count() + headerField.count() + minimumId.count() + navigationLinks.count() + path.count() + requestMethod.count() + resource.count() + responseCode.count() + response.count() + validateProfileId.count() <=1) or (((expression.count() + minimumId.count() <=2) or (expression.count() + validateProfileId.count() <=2)) and (expression.count() + path.count() <=1) and (minimumId.count() + validateProfileId.count() <=1)) or (((path.count() + minimumId.count() <=2) or (path.count() + validateProfileId.count() <=2)) and (expression.count() + path.count() <=1) and (minimumId.count() + validateProfileId.count() <=1))",
  "facilityType.empty() or context.where(resolve() is Encounter).empty()",
  "fixed.empty() or (type.count()  <= 1)",
  "fixed.exists().not()",
  "fullUrl.exists() implies fullUrl.contains('/_history/').not()",
  "generation='generated' implies source.empty()",
  "group.stratifier.all((code | description | criteria).exists() xor component.exists())",
  "group.stratifier.stratum.all(value.exists() xor component.exists())",
  "hasValue() or (children().count() > id.count())",
  "htmlChecks()",
  "imageRegion3D.empty() or frameOfReferenceUid.exists()",
  "imageRegion3D.empty() or instance.imageRegion2D.empty()",
  "import.exists() implies type.exists().not() and data.exists().not() and activity.exists().not()",
  "initial.value.exists() implies defineVariable('type', type).trace('type', %type).initial.value.type().name.distinct().select(iif($this='simplequantity', 'quantity', $this.lower())).where(%type!=$this and (%type='text' and $this='string').not() and (%type='url' and $this='uri').not()).trace('Unmatched initial value type(s)').empty()",
  "initiator.exists() implies initiator = 'OTHER' or %resource.actor.where(key=%context.initiator).exists()",
  "instance.empty() or seriesUid.exists()",
  "instance.key.count() = instance.key.distinct().count()",
  "instance.title.count() = instance.title.distinct().count()",
  "interval.exists().not() xor offsets.exists().not()",
  "issues.exists() implies (issues.issue.severity = 'information' or issues.issue.severity = 'warning')",
  "item.count()>1",
  "key != 'OTHER'",
  "key.exists()",
  "kind != 'logical' implies snapshot.empty() or snapshot.element.first().path = type",
  "kind != 'root' or uniqueId.all(type != 'uuid')",
  "kind!='logical'  implies snapshot.element.first().type.empty()",
  "lastModified.exists().not() or authoredOn.exists().not() or lastModified >= authoredOn",
  "low.exists() or high.exists() or text.exists()",
  "low.value.empty() or high.value.empty() or low.lowBoundary().comparable(high.highBoundary()).not() or (low.lowBoundary() <= high.highBoundary())",
  "lowNumerator.hasValue().not() or highNumerator.hasValue().not()  or (lowNumerator.lowBoundary() <= highNumerator.highBoundary())",
  "mapping.select(identity).isDistinct()",
  "max='*' or (max.toInteger() > 0)",
  "messaging.endpoint.empty() or kind = 'instance'",
  "min.empty() or max.empty() or (max = '*') or iif(max != '*', min <= max.toInteger())",
  "mustHaveValue.value implies valueAlternatives.empty()",
  "name.exists() implies name.matches('^[A-Z]([A-Za-z0-9_]){1,254}$')",
  "name.exists() or telecom.exists() or address.exists() or organization.exists()",
  "name.exists() or uri.exists()",
  "name.hasValue() implies name.matches('[A-Za-z][A-Za-z0-9\\\\_]{0,63}')",
  "name.where(display=true).count() <= 1",
  "offset.empty() or (when.exists() and when.select($this in ('C' | 'CM' | 'CD' | 'CV')).allFalse())",
  "onBehalfOf.exists() and actor.resolve().exists() implies actor.resolve().where($this is Practitioner or $this is PractitionerRole).empty()",
  "operation.exists() xor assert.exists()",
  "operator = 'exists' implies (answer is boolean)",
  "oralDiet.exists() or supplement.exists() or enteralFormula.exists()",
  "orderDetail.empty() or code.exists()",
  "orderMeaning.empty() implies slicing.where(rules='openAtEnd' or ordered).exists().not()",
  "originatingAppointment.exists().not() or recurrenceTemplate.exists().not()",
  "participantType.exists() or actor.exists()",
  "path.exists() xor searchParam.exists()",
  "path.matches('^[A-Za-z][A-Za-z0-9]{0,63}(\\\\.[a-z][A-Za-z0-9]{0,63}(\\\\[x])?)*$')",
  "path.matches('^[^\\\\s\\\\.,:;\\\\\\'\"\\\\/|?!@#$%&*()\\\\[\\\\]{}]{1,64}(\\\\.[^\\\\s\\\\.,:;\\\\\\'\"\\\\/|?!@#$%&*()\\\\[\\\\]{}]{1,64}(\\\\[x\\\\])?(\\\\:[^\\\\s\\\\.]+)?)*$')",
  "pattern.empty() or (type.count() <= 1)",
  "pattern.empty() or fixed.empty()",
  "period.empty() or periodUnit.exists()",
  "period.exists() implies period >= 0",
  "periodMax.empty() or period.exists()",
  "permittedUnit.exists() implies permittedDataType.exists(value = 'Quantity')",
  "practiceSetting.empty() or context.where(resolve() is Encounter).empty()",
  "probability.empty() or ((probability is decimal) implies ((probability as decimal) <= 100))",
  "process.title.count() = process.title.distinct().count()",
  "profile.isDistinct()",
  "provisionReference.exists() or provision.exists()",
  "question.exists() implies (%resource.repeat(item).linkId contains question)",
  "receiver.exists() implies receiver = 'OTHER' or %resource.actor.where(key=%context.receiver).exists()",
  "reference.exists()  implies (reference.startsWith('#').not() or (reference.substring(1).trace('url') in %rootResource.contained.id.trace('ids')) or (reference='#' and %rootResource!=%resource))",
  "reference.exists() or identifier.exists() or display.exists() or extension.exists()",
  "repeat(answer|item).select(item.where(answer.value.exists()).linkId.isDistinct()).allTrue()",
  "repeat(item).linkId.isDistinct()",
  "repeats.not() implies answerOption.where(initialSelected=true).count() <= 1",
  "repeats=true or initial.count() <= 1",
  "requirement.exists() xor relatedData.exists()",
  "resource.exists() implies action.exists().not()",
  "resource.exists() or request.exists() or response.exists()",
  "resource.groupingId.all(%context.grouping.id contains $this)",
  "resource.select(type).isDistinct()",
  "rest.exists() or messaging.exists() or document.exists()",
  "rest.mode.isDistinct()",
  "restriction.exists() implies code.coding.where(code='fulfill' and system='http://hl7.org/fhir/CodeSystem/task-code').exists() and focus.exists()",
  "role.exists() or member.exists()",
  "searchParam.select(name).isDistinct()",
  "searchType.exists() implies type = 'string'",
  "seriesNumber.empty() or seriesUid.exists()",
  "seriesUid.empty() or studyUid.exists()",
  "seriesUid.exists() or imageRegion3D.exists()",
  "sliceIsConstraining.exists() implies sliceName.exists()",
  "sliceName.empty() or sliceName.matches('^[a-zA-Z0-9\\\\/\\\\-_\\\\[\\\\]\\\\@]+$')",
  "slicing.exists().not() or (slicing.discriminator.exists() or slicing.description.exists())",
  "snapshot.element.all(id.exists()) and differential.element.all(id.exists())",
  "snapshot.element.all(id.exists()) and snapshot.element.id.trace('ids').isDistinct()",
  "snapshot.exists() or differential.exists()",
  "sourceId.exists() or (targetId.count() + url.count() + params.count() = 1) or (type.code in ('capabilities' | 'search' | 'transaction' | 'history'))",
  "sourceId.exists() or (targetId.count() + url.count() + params.count() = 1) or (type.code in ('capabilities' |'search' | 'transaction' | 'history'))",
  "start.exists() = end.exists()",
  "start.exists() implies start <= end",
  "start.hasValue().not() or end.hasValue().not() or (start.lowBoundary() <= end.highBoundary())",
  "status!='not-done' or (reasonCode.exists().not() and reasonReference.exists().not())",
  "status='active' or status='retired' implies actor.exists()",
  "status='active' or status='retired' implies process.exists()",
  "status='not-done' or notDoneReason.exists().not()",
  "strength != 'required' implies additional.where(purpose = 'required' and usage.empty()).empty()",
  "strength = 'descriptive' implies valueSet.empty()",
  "structureType.exists() and structureType.memberOf('http://hl7.org/fhir/ValueSet/resource-types').not() implies structureVersion.exists()",
  "summary.exists() or assessment.exists()",
  "targetProfile.exists() implies (type = 'Reference' or type = 'canonical' or type.memberOf('http://hl7.org/fhir/ValueSet/all-resource-types'))",
  "targetProfile.isDistinct()",
  "telecom.where(use = 'home').empty()",
  "text.`div`.exists()",
  "text.exists() or entry.exists() or section.exists()",
  "timeOfDay.empty() or when.empty()",
  "total.empty() or (type = 'searchset') or (type = 'history')",
  "type != 'Extension' or baseDefinition != 'http://hl7.org/fhir/StructureDefinition/Extension' or derivation = 'specialization' or (context.exists())",
  "type = 'code' implies system.exists()",
  "type = 'document' implies (identifier.system.exists() and identifier.value.exists())",
  "type = 'document' implies (timestamp.hasValue())",
  "type = 'document' implies entry.first().resource.is(Composition)",
  "type = 'document' implies issues.empty()",
  "type = 'history' implies entry.all(request.exists() and response.exists() and ((request.method in ('POST' | 'PATCH' | 'PUT')) = resource.exists()))",
  "type = 'history' implies entry.request.method != 'PATCH'",
  "type = 'message' implies entry.first().resource.is(MessageHeader)",
  "type = 'query-status' implies status.exists()",
  "type = 'searchset' implies link.where(relation = 'self' and url.exists()).exists()",
  "type = 'subscription-notification' implies entry.first().resource.is(SubscriptionStatus)",
  "type in ('document' | 'message' | 'searchset' | 'collection') implies entry.all(resource.exists() and request.empty() and response.empty())",
  "type in ('transaction' | 'batch') implies entry.all(request.method.exists() and ((request.method in ('POST' | 'PATCH' | 'PUT')) = resource.exists()))",
  "type in ('transaction-response' | 'batch-response') implies entry.all(response.exists())",
  "type!='display' or (required.empty() and repeats.empty())",
  "type!='display' or code.empty()",
  "type!='display' or readOnly.empty()",
  "type.exists() or actor.exists()",
  "type.exists() or part.exists()",
  "type.exists() xor definition.exists()",
  "type.select(code).isDistinct()",
  "type.where(code in 'code' | 'Coding' | 'CodeableConcept' | 'CodeableReference' | 'uri' | 'string' | 'Quantity').count() > 1 implies binding.empty()",
  "type='display' implies item.empty()",
  "type='group' implies item.empty().not()",
  "type='transaction' or type='transaction-response' or type='batch' or type='batch-response' or entry.all(fullUrl.exists() or request.method='POST')",
  "uniqueId.where(authoritative = true).select(type.toString() & period.start.toString() & period.end.toString()).isDistinct()",
  "uniqueId.where(preferred = true).select(type).isDistinct()",
  "url.startsWith('http://hl7.org/fhir/StructureDefinition') implies (differential | snapshot).element.type.code.all(matches('^[a-zA-Z0-9]+$') or matches('^http:\\\\/\\\\/hl7\\\\.org\\\\/fhirpath\\\\/System\\\\.[A-Z][A-Za-z]+$'))",
  "url.startsWith('http://hl7.org/fhir/StructureDefinition') implies (snapshot.element.defaultValue.empty() and differential.element.defaultValue.empty())",
  "vaccineCode.exists() or targetDisease.exists()",
  "value.empty() or component.code.where(coding.intersect(%resource.code.coding).exists()).empty()",
  "value.empty() or system.exists()",
  "value.exists()",
  "value.exists() implies code.exists()",
  "valueSet.exists() implies (valueSet.startsWith('http:') or valueSet.startsWith('https') or valueSet.startsWith('urn:') or valueSet.startsWith('#'))",
  "valueSet.exists() or system.exists()",
  "version.code.isDistinct()",
  "version.count() > 1 implies version.all(code.exists())",
  "version.exists() implies version.key.intersect(%resource.process.descendants().where(instanceReference = %context.key).versionReference).exists()",
  "version.key.count() = version.key.distinct().count()",
  "version.title.count() = version.title.distinct().count()",
  "version.where(isDefault = true).count() <= 1",
  "versionReference.empty() implies %resource.instance.where(key=%context.instanceReference).version.empty()",
  "versionReference.exists() implies %resource.instance.where(key=%context.instanceReference).version.where(key=%context.versionReference).exists()",
  "who.resolve().exists() and onBehalfOf.resolve().exists() implies who.resolve() != onBehalfOf.resolve()",
  "who.resolve().ofType(Organization).exists() and onBehalfOf.resolve().ofType(HealthcareService).providedBy.resolve().exists() implies who.resolve() != onBehalfOf.resolve().ofType(HealthcareService).providedBy.resolve()",
  "who.resolve().ofType(Organization).exists() and onBehalfOf.resolve().ofType(PractitionerRole).organization.resolve().exists() implies who.resolve() != onBehalfOf.resolve().organization.resolve()",
  "who.resolve().ofType(PractitionerRole).practitioner.resolve().exists() and onBehalfOf.resolve().ofType(Practitioner).exists() implies who.resolve().practitioner.resolve() != onBehalfOf.resolve()"
]
